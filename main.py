import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties

import config
from database.db_operations import get_engine, init_db, get_session, setup_initial_data
from database.models import User, UserRole
from keyboards.reply import get_main_keyboard, get_manager_keyboard, get_admin_keyboard
from middlewares.user_middleware import UserMiddleware
from utils.logger import setup_logger
from utils.error_handler import handle_errors
logger = setup_logger(__name__)

bot = Bot(
    token=config.BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
engine = get_engine(config.DATABASE_URL)
init_db(engine)
db_session = get_session(engine)
setup_initial_data(db_session)
db_session.close()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è middleware
dp.message.middleware(UserMiddleware(engine))
dp.callback_query.middleware(UserMiddleware(engine))


@dp.message(Command("start"))
@handle_errors
async def cmd_start(message: types.Message, db_user: dict):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    # db_user —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ data –∏–∑ middleware
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–∫–∞–∑–∞—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    if db_user['role'] == UserRole.ADMIN:
        keyboard = get_admin_keyboard()
    elif db_user['role'] == UserRole.MANAGER:
        keyboard = get_manager_keyboard()
    else:
        keyboard = get_main_keyboard()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer(
        f"üëã –ü—Ä–∏–≤—ñ—Ç, {message.from_user.first_name}!\n\n"
        f"–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ Changify - –±–æ—Ç–∞ –¥–ª—è P2P-–æ–±–º—ñ–Ω—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —Ç–∞ —Ñ—ñ–∞—Ç–Ω–∏—Ö –≤–∞–ª—é—Ç.\n\n"
        f"–©–æ–± –ø–æ—á–∞—Ç–∏, –æ–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –¥—ñ—é –≤ –º–µ–Ω—é.",
        reply_markup=keyboard
    )


@dp.message(Command("help"))
@handle_errors
async def cmd_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "üìö <b>–û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞:</b>\n\n"
        "/start - –ø–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É\n"
        "/rates - –ø–æ—Ç–æ—á–Ω—ñ –∫—É—Ä—Å–∏ –æ–±–º—ñ–Ω—É\n"
        "/profile - —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≤–∞—à –ø—Ä–æ—Ñ—ñ–ª—å\n"
        "/history - —ñ—Å—Ç–æ—Ä—ñ—è –≤–∞—à–∏—Ö –∑–∞—è–≤–æ–∫\n\n"
        "–Ø–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–ª–∏ –ø–∏—Ç–∞–Ω–Ω—è, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç–∞."
    )
    await message.answer(help_text)


@dp.message()
@handle_errors
async def unknown_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    # –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∏–∑ reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    await message.answer("–Ø –Ω–µ —Ä–æ–∑—É–º—ñ—é —Ü—é –∫–æ–º–∞–Ω–¥—É. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /help –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥.")


async def on_startup():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π")
    
    session = get_session(engine)
    # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    for admin_id in config.ADMIN_IDS:
        from database.db_operations import create_admin_user
        create_admin_user(session, admin_id)
    
    # –ù–∞–∑–Ω–∞—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    for manager_id in config.MANAGER_IDS:
        user = session.query(User).filter_by(telegram_id=manager_id).first()
        if user:
            user.role = UserRole.MANAGER
        else:
            new_manager = User(telegram_id=manager_id, role=UserRole.MANAGER)
            session.add(new_manager)
    
    session.commit()
    session.close()


async def on_shutdown():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
    logger.info("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–∏–π")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        await on_startup()
        await dp.start_polling(bot)
    finally:
        await on_shutdown()

if __name__ == "__main__":
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π
        loop = asyncio.get_event_loop()
        if loop.is_running():
            logger.warning("Event loop is already running, skipping main()")
        else:
            asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        logger.critical(f"–ù–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        raise