import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage

import config
from database.db_operations import get_engine, init_db, get_session, setup_initial_data
from database.models import User, UserRole

logging.basicConfig(
    level=config.LOG_LEVELS.get(config.LOG_LEVEL, logging.INFO),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    filename=config.LOG_FILE,
    filemode='a'
)
logger = logging.getLogger(__name__)

bot = Bot(token=config.BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

engine = get_engine(config.DATABASE_URL)
init_db(engine)
db_session = get_session(engine)
setup_initial_data(db_session)


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    try:
        user_data = {
            'telegram_id': message.from_user.id,
            'username': message.from_user.username,
            'first_name': message.from_user.first_name,
            'last_name': message.from_user.last_name
        }
        
        session = get_session(engine)
        from database.db_operations import get_or_create_user
        user = get_or_create_user(session, user_data)
        session.close()
        
        await message.answer(
            f"üëã –ü—Ä–∏–≤—ñ—Ç, {message.from_user.first_name}!\n\n"
            f"–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ Changify - –±–æ—Ç–∞ –¥–ª—è P2P-–æ–±–º—ñ–Ω—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —Ç–∞ —Ñ—ñ–∞—Ç–Ω–∏—Ö –≤–∞–ª—é—Ç.\n\n"
            f"–©–æ–± –ø–æ—á–∞—Ç–∏, –æ–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –¥—ñ—é –≤ –º–µ–Ω—é."
        )
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±–Ω–∏–∫—É /start: {e}")
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.")


@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    help_text = (
        "üìö <b>–û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞:</b>\n\n"
        "/start - –ø–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É\n"
        "/rates - –ø–æ—Ç–æ—á–Ω—ñ –∫—É—Ä—Å–∏ –æ–±–º—ñ–Ω—É\n"
        "/profile - —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≤–∞—à –ø—Ä–æ—Ñ—ñ–ª—å\n"
        "/history - —ñ—Å—Ç–æ—Ä—ñ—è –≤–∞—à–∏—Ö –∑–∞—è–≤–æ–∫\n\n"
        "–Ø–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–ª–∏ –ø–∏—Ç–∞–Ω–Ω—è, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç–∞."
    )
    await message.answer(help_text, parse_mode="HTML")


@dp.message()
async def unknown_message(message: types.Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –Ω–µ–≤—ñ–¥–æ–º–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    await message.answer("–Ø –Ω–µ —Ä–æ–∑—É–º—ñ—é —Ü—é –∫–æ–º–∞–Ω–¥—É. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /help –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥.")


async def on_startup():
    """–î—ñ—ó –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞"""
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π")
    
    session = get_session(engine)
    for admin_id in config.ADMIN_IDS:
        from database.db_operations import create_admin_user
        create_admin_user(session, admin_id)
    
    for manager_id in config.MANAGER_IDS:
        user = session.query(User).filter_by(telegram_id=manager_id).first()
        if user:
            user.role = UserRole.MANAGER
        else:
            new_manager = User(telegram_id=manager_id, role=UserRole.MANAGER)
            session.add(new_manager)
    
    session.commit()
    session.close()


async def on_shutdown():
    """–î—ñ—ó –ø—Ä–∏ –∑—É–ø–∏–Ω—Ü—ñ –±–æ—Ç–∞"""
    logger.info("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–∏–π")
    if db_session:
        db_session.close()


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞"""
    try:
        await on_startup()
        await dp.start_polling(bot)
    finally:
        await on_shutdown()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        logger.critical(f"–ù–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        raise