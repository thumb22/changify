from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from keyboards.reply import get_main_keyboard
from keyboards.inline import get_currencies_selection, get_pagination_keyboard
from states.exchange import ExchangeStates
from utils.error_handler import handle_errors
from utils.db_utils import get_all_currencies, get_exchange_rate, get_banks_for_currency
from database.models import User, UserRole

router = Router()

@router.message(F.text == "üîÑ –û–±–º—ñ–Ω –≤–∞–ª—é—Ç")
@handle_errors
async def exchange_start(message: types.Message, state: FSMContext, db_user: dict):
    await state.set_state(ExchangeStates.SELECT_FROM_CURRENCY)
    await message.answer(
        "üí± <b>–û–±–º—ñ–Ω –≤–∞–ª—é—Ç</b>\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –≤–∞–ª—é—Ç—É, —è–∫—É —Ö–æ—á–µ—Ç–µ –æ–±–º—ñ–Ω—è—Ç–∏:",
        reply_markup=get_currencies_selection("from")
    )

@router.message(F.text == "üìä –ö—É—Ä—Å–∏ –≤–∞–ª—é—Ç")
@handle_errors
async def show_rates(message: types.Message, db_user: dict, engine):
    currencies = await get_all_currencies(engine)
    if not currencies:
        await message.answer("–ù–∞ –∂–∞–ª—å, —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫—É—Ä—Å–∏ –≤–∞–ª—é—Ç —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return
    rates_text = "üíπ <b>–ü–æ—Ç–æ—á–Ω—ñ –∫—É—Ä—Å–∏ –æ–±–º—ñ–Ω—É</b>\n\n"
    pairs = [("USDT", "UAH"), ("USD", "UAH"), ("USDT", "USD")]
    for from_curr, to_curr in pairs:
        rate = await get_exchange_rate(engine, from_curr, to_curr)
        if rate:
            rates_text += f"<b>{from_curr} ‚Üí {to_curr}:</b> {rate:.2f}\n"
    rates_text += "\n–ö—É—Ä—Å–∏ –º–æ–∂—É—Ç—å –∑–º—ñ–Ω—é–≤–∞—Ç–∏—Å—è. –î–ª—è –∑–¥—ñ–π—Å–Ω–µ–Ω–Ω—è –æ–±–º—ñ–Ω—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å 'üîÑ –û–±–º—ñ–Ω –≤–∞–ª—é—Ç'"
    await message.answer(rates_text, parse_mode="HTML")

@router.message(F.text == "üìã –Ü—Å—Ç–æ—Ä—ñ—è")
@handle_errors
async def show_history(message: types.Message, db_user: dict, engine):
    from sqlalchemy.orm import Session
    from database.models import Order, OrderStatus
    with Session(engine) as session:
        orders = session.query(Order).filter(Order.user_id == db_user['id']).order_by(Order.created_at.desc()).limit(5).all()
        if not orders:
            await message.answer("–£ –≤–∞—à—ñ–π —ñ—Å—Ç–æ—Ä—ñ—ó —â–µ –Ω–µ–º–∞—î –∑–∞—è–≤–æ–∫ –Ω–∞ –æ–±–º—ñ–Ω.")
            return
        history_text = "üìù <b>–í–∞—à–∞ —ñ—Å—Ç–æ—Ä—ñ—è –∑–∞—è–≤–æ–∫</b>\n\n"
        for order in orders:
            status_emoji = {
                OrderStatus.CREATED: "üÜï",
                OrderStatus.AWAITING_PAYMENT: "‚è≥",
                OrderStatus.PAYMENT_CONFIRMED: "‚úÖ",
                OrderStatus.PROCESSING: "‚öôÔ∏è",
                OrderStatus.COMPLETED: "‚úÖ",
                OrderStatus.CANCELLED: "‚ùå"
            }.get(order.status, "‚ùì")
            history_text += (
                f"<b>–ó–∞—è–≤–∫–∞ #{order.id}</b> {status_emoji}\n"
                f"üìÖ {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                f"üí± {order.amount_from} {order.from_currency.code} ‚Üí "
                f"{order.amount_to} {order.to_currency.code}\n"
                f"üìä –ö—É—Ä—Å: {order.rate:.2f}\n"
                f"üìë –°—Ç–∞—Ç—É—Å: {order.status.value}\n\n"
            )
        await message.answer(
            history_text,
            parse_mode="HTML",
            reply_markup=get_pagination_keyboard(1, 1, "history")
        )

@router.message(F.text == "üÜò –ü—ñ–¥—Ç—Ä–∏–º–∫–∞")
@handle_errors
async def show_support(message: types.Message, db_user: dict):
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç–∏ —É –ø—ñ–¥—Ç—Ä–∏–º–∫—É", callback_data="support:new")
    )
    builder.row(
        InlineKeyboardButton(text="üìã –Ü—Å—Ç–æ—Ä—ñ—è –∑–≤–µ—Ä–Ω–µ–Ω—å", callback_data="support:history")
    )
    await message.answer(
        "üÜò <b>–ü—ñ–¥—Ç—Ä–∏–º–∫–∞</b>\n\n"
        "–Ø–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–ª–∏ –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –ø—Ä–æ–±–ª–µ–º–∏ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –±–æ—Ç–∞, "
        "–≤–∏ –º–æ–∂–µ—Ç–µ –∑–≤'—è–∑–∞—Ç–∏—Å—è –∑ –Ω–∞—à–æ—é –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é.",
        parse_mode="HTML",
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data.startswith("support:"))
@handle_errors
async def process_support_callback(callback: types.CallbackQuery, state: FSMContext):
    action = callback.data.split(":")[1]
    if action == "new":
        await callback.message.answer(
            "‚úçÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –ø—Ä–æ–±–ª–µ–º—É –≤ –æ–¥–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ."
        )
        await callback.answer()
    elif action == "history":
        await callback.message.answer(
            "üìã –Ü—Å—Ç–æ—Ä—ñ—è –≤–∞—à–∏—Ö –∑–≤–µ—Ä–Ω–µ–Ω—å –±—É–¥–µ —Ç—É—Ç.\n"
            "–ü–æ–∫–∏ —â–æ —Ü—è —Ñ—É–Ω–∫—Ü—ñ—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ."
        )
        await callback.answer()

def setup_user_handlers(dp):
    dp.include_router(router)