# handlers/exchange.py
from aiogram import Dispatcher, types
from aiogram.filters import Text
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton

from states.exchange import ExchangeStates
from keyboards.inline import get_currencies_selection, get_bank_selection
from utils.error_handler import handle_errors
from utils.db_utils import get_exchange_rate, get_banks_for_currency
from database.models import Currency, Order, OrderStatus

async def start_exchange(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±–º–µ–Ω–∞"""
    await state.clear()
    await message.answer(
        "üîÑ <b>–û–±–º—ñ–Ω –≤–∞–ª—é—Ç</b>\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –≤–∞–ª—é—Ç—É, —è–∫—É —Ö–æ—á–µ—Ç–µ –æ–±–º—ñ–Ω—è—Ç–∏:",
        reply_markup=get_currencies_selection("from")
    )
    await state.set_state(ExchangeStates.SELECT_FROM_CURRENCY)

async def process_from_currency(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏—Å—Ö–æ–¥–Ω–æ–π –≤–∞–ª—é—Ç—ã"""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –≤–∞–ª—é—Ç—ã –∏–∑ callback_data
    currency_code = callback.data.split(":")[2]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(from_currency=currency_code)
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ü–µ–ª–µ–≤—É—é –≤–∞–ª—é—Ç—É
    await callback.message.edit_text(
        f"–û–±—Ä–∞–Ω–æ: <b>{currency_code}</b>\n\n"
        f"–¢–µ–ø–µ—Ä –æ–±–µ—Ä—ñ—Ç—å –≤–∞–ª—é—Ç—É, –Ω–∞ —è–∫—É —Ö–æ—á–µ—Ç–µ –æ–±–º—ñ–Ω—è—Ç–∏:",
        reply_markup=get_currencies_selection("to", currency_code)
    )
    
    await state.set_state(ExchangeStates.SELECT_TO_CURRENCY)

async def process_to_currency(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–µ–≤–æ–π –≤–∞–ª—é—Ç—ã"""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –≤–∞–ª—é—Ç—ã –∏–∑ callback_data
    currency_code = callback.data.split(":")[2]
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    from_currency = data.get('from_currency')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(to_currency=currency_code)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –æ–±–º–µ–Ω–∞
    engine = callback.bot.get("db_engine")
    rate = await get_exchange_rate(engine, from_currency, currency_code)
    
    if rate:
        await state.update_data(rate=rate)
        
        await callback.message.edit_text(
            f"–û–±–º—ñ–Ω: <b>{from_currency} ‚Üí {currency_code}</b>\n"
            f"–ü–æ—Ç–æ—á–Ω–∏–π –∫—É—Ä—Å: <b>1 {from_currency} = {rate:.2f} {currency_code}</b>\n\n"
            f"–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É {from_currency}, —è–∫—É —Ö–æ—á–µ—Ç–µ –æ–±–º—ñ–Ω—è—Ç–∏:"
        )
        
        await state.set_state(ExchangeStates.ENTER_AMOUNT)
    else:
        await callback.message.edit_text(
            "–ù–∞ –∂–∞–ª—å, –æ–±–º—ñ–Ω –¥–ª—è —Ü—ñ—î—ó –ø–∞—Ä–∏ –≤–∞–ª—é—Ç —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ –≤–∏–±—Ä–∞—Ç–∏ —ñ–Ω—à—É –ø–∞—Ä—É –∞–±–æ –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é."
        )
        await state.clear()

async def process_amount(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –¥–ª—è –æ–±–º–µ–Ω–∞"""
    try:
        amount = float(message.text.strip())
        if amount <= 0:
            await message.answer("–°—É–º–∞ –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–µ –Ω—É–ª—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
            return
    except ValueError:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É —á–∏—Å–ª–æ–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(amount_from=amount)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    from_currency = data.get('from_currency')
    to_currency = data.get('to_currency')
    rate = data.get('rate')
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –∫ –ø–æ–ª—É—á–µ–Ω–∏—é
    amount_to = amount * rate
    await state.update_data(amount_to=amount_to)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤—ã–±–∏—Ä–∞—Ç—å –±–∞–Ω–∫ (–¥–ª—è UAH)
    engine = message.bot.get("db_engine")
    
    if to_currency == "UAH":
        # –ï—Å–ª–∏ –æ–±–º–µ–Ω –Ω–∞ UAH, –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –±–∞–Ω–∫
        await message.answer(
            f"–°—É–º–∞ –¥–æ –æ–±–º—ñ–Ω—É: <b>{amount:.2f} {from_currency}</b>\n"
            f"–°—É–º–∞ –¥–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è: <b>{amount_to:.2f} {to_currency}</b>\n\n"
            f"–û–±–µ—Ä—ñ—Ç—å –±–∞–Ω–∫ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤:",
            reply_markup=get_bank_selection()
        )
        await state.set_state(ExchangeStates.SELECT_BANK)
    else:
        # –ï—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ –≤—ã–±–∏—Ä–∞—Ç—å –±–∞–Ω–∫, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
        await message.answer(
            f"–°—É–º–∞ –¥–æ –æ–±–º—ñ–Ω—É: <b>{amount:.2f} {from_currency}</b>\n"
            f"–°—É–º–∞ –¥–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è: <b>{amount_to:.2f} {to_currency}</b>\n\n"
            f"–í–≤–µ–¥—ñ—Ç—å —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è {to_currency}:"
        )
        await state.set_state(ExchangeStates.ENTER_PAYMENT_DETAILS)

async def process_bank_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –±–∞–Ω–∫–∞"""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º ID –±–∞–Ω–∫–∞ –∏–∑ callback_data
    bank_id = int(callback.data.split(":")[1])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(bank_id=bank_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    to_currency = data.get('to_currency')
    
    await callback.message.edit_text(
        f"–û–±—Ä–∞–Ω–æ –±–∞–Ω–∫: <b>{get_bank_name(bank_id)}</b>\n\n"
        f"–í–≤–µ–¥—ñ—Ç—å —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ (–Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏) –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è {to_currency}:"
    )
    
    await state.set_state(ExchangeStates.ENTER_PAYMENT_DETAILS)

def get_bank_name(bank_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞ –ø–æ ID"""
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –±–∞–Ω–∫–∞ –∏–∑ –ë–î
    banks = {1: "–ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫", 2: "–ú–æ–Ω–æ–±–∞–Ω–∫", 3: "–ü–£–ú–ë"}
    return banks.get(bank_id, "–ù–µ–≤—ñ–¥–æ–º–∏–π –±–∞–Ω–∫")

async def process_payment_details(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤"""
    payment_details = message.text.strip()
    
    if len(payment_details) < 5:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        await message.answer("–†–µ–∫–≤—ñ–∑–∏—Ç–∏ –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ:")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(payment_details=payment_details)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    from_currency = data.get('from_currency')
    to_currency = data.get('to_currency')
    amount_from = data.get('amount_from')
    amount_to = data.get('amount_to')
    bank_id = data.get('bank_id')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirmation_text = (
        f"üìù <b>–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏ –Ω–∞ –æ–±–º—ñ–Ω</b>\n\n"
        f"–ù–∞–ø—Ä—è–º–æ–∫: <b>{from_currency} ‚Üí {to_currency}</b>\n"
        f"–°—É–º–∞ –æ–±–º—ñ–Ω—É: <b>{amount_from:.2f} {from_currency}</b>\n"
        f"–°—É–º–∞ –¥–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è: <b>{amount_to:.2f} {to_currency}</b>\n"
    )
    
    if bank_id:
        confirmation_text += f"–ë–∞–Ω–∫: <b>{get_bank_name(bank_id)}</b>\n"
    
    confirmation_text += (
        f"–†–µ–∫–≤—ñ–∑–∏—Ç–∏: <code>{payment_details}</code>\n\n"
        f"–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–∞–Ω—ñ —Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –∑–∞—è–≤–∫—É:"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="order:confirm"),
        InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="order:cancel")
    )
    
    await message.answer(confirmation_text, reply_markup=builder.as_markup())
    await state.set_state(ExchangeStates.CONFIRM_ORDER)

async def confirm_order(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏"""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –≤ –ë–î
    engine = callback.bot.get("db_engine")
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏

    await callback.message.edit_text(
        "‚úÖ <b>–ó–∞—è–≤–∫—É —Å—Ç–≤–æ—Ä–µ–Ω–æ!</b>\n\n"
        "–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π.\n"
        "–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –≤ —Ä–æ–∑–¥—ñ–ª—ñ 'üìã –Ü—Å—Ç–æ—Ä—ñ—è'."
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
    
    await state.clear()

async def cancel_order(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏"""
    await callback.answer()
    
    await callback.message.edit_text(
        "‚ùå –ó–∞—è–≤–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.\n\n"
        "–í–∏ –º–æ–∂–µ—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –∑–∞—è–≤–∫—É –≤ –±—É–¥—å-—è–∫–∏–π —á–∞—Å —á–µ—Ä–µ–∑ –º–µ–Ω—é 'üîÑ –û–±–º—ñ–Ω –≤–∞–ª—é—Ç'."
    )
    
    await state.clear()

async def process_back_to_currencies(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤–∞–ª—é—Ç—ã"""
    await callback.answer()
    
    current_state = await state.get_state()
    
    if current_state == ExchangeStates.SELECT_TO_CURRENCY:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∏—Å—Ö–æ–¥–Ω–æ–π –≤–∞–ª—é—Ç—ã
        await callback.message.edit_text(
            "üîÑ <b>–û–±–º—ñ–Ω –≤–∞–ª—é—Ç</b>\n\n"
            "–û–±–µ—Ä—ñ—Ç—å –≤–∞–ª—é—Ç—É, —è–∫—É —Ö–æ—á–µ—Ç–µ –æ–±–º—ñ–Ω—è—Ç–∏:",
            reply_markup=get_currencies_selection("from")
        )
        await state.set_state(ExchangeStates.SELECT_FROM_CURRENCY)
    else:
        # –í –¥—Ä—É–≥–∏—Ö —Å–ª—É—á–∞—è—Ö –ø—Ä–æ—Å—Ç–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await callback.message.edit_text(
            "–û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.\n\n"
            "–í–∏ –º–æ–∂–µ—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –∑–∞—è–≤–∫—É –≤ –±—É–¥—å-—è–∫–∏–π —á–∞—Å —á–µ—Ä–µ–∑ –º–µ–Ω—é 'üîÑ –û–±–º—ñ–Ω –≤–∞–ª—é—Ç'."
        )
        await state.clear()

def setup(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    # –ö–æ–º–∞–Ω–¥—ã –º–µ–Ω—é
    dp.message.register(start_exchange, Text(text="üîÑ –û–±–º—ñ–Ω –≤–∞–ª—é—Ç"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
    dp.callback_query.register(process_from_currency, 
                               lambda c: c.data.startswith("currency:from:"), 
                               ExchangeStates.SELECT_FROM_CURRENCY)
    
    dp.callback_query.register(process_to_currency, 
                               lambda c: c.data.startswith("currency:to:"), 
                               ExchangeStates.SELECT_TO_CURRENCY)
    
    dp.message.register(process_amount, ExchangeStates.ENTER_AMOUNT)
    
    dp.callback_query.register(process_bank_selection, 
                              lambda c: c.data.startswith("bank:") and not c.data.endswith(":back"), 
                              ExchangeStates.SELECT_BANK)
    
    dp.message.register(process_payment_details, ExchangeStates.ENTER_PAYMENT_DETAILS)
    
    dp.callback_query.register(confirm_order, 
                              lambda c: c.data == "order:confirm", 
                              ExchangeStates.CONFIRM_ORDER)
    
    dp.callback_query.register(cancel_order, 
                              lambda c: c.data == "order:cancel", 
                              ExchangeStates.CONFIRM_ORDER)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ "–ù–∞–∑–∞–¥"
    dp.callback_query.register(process_back_to_currencies, 
                              lambda c: c.data == "currency:back")
    
    dp.callback_query.register(process_back_to_currencies, 
                              lambda c: c.data == "bank:back", 
                              ExchangeStates.SELECT_BANK)