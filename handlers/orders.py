from aiogram import F, Dispatcher, types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton
from database.models import Order, OrderStatus, User, Currency, Bank
from sqlalchemy import desc
from database.db_operations import get_session
from datetime import datetime

async def show_user_orders(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    
    engine = message.bot.get("db_engine")
    session = get_session(engine)
    
    try:
        db_user = session.query(User).filter_by(telegram_id=user_id).first()
        
        if not db_user:
            await message.answer("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
            return
        
        orders = session.query(Order).filter_by(user_id=db_user.id).order_by(desc(Order.created_at)).limit(10).all()
        
        if not orders:
            await message.answer("–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ—ó –∑–∞—è–≤–∫–∏ –Ω–∞ –æ–±–º—ñ–Ω.")
            return
        
        text = "üìã <b>–í–∞—à—ñ –æ—Å—Ç–∞–Ω–Ω—ñ –∑–∞—è–≤–∫–∏:</b>\n\n"
        
        for order in orders:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–∞–ª—é—Ç–∞—Ö
            from_currency = session.query(Currency).filter_by(id=order.from_currency_id).first()
            to_currency = session.query(Currency).filter_by(id=order.to_currency_id).first()
            
            status_emoji = {
                OrderStatus.CREATED: "üÜï",
                OrderStatus.AWAITING_PAYMENT: "‚è≥",
                OrderStatus.PAYMENT_CONFIRMED: "‚úÖ",
                OrderStatus.PROCESSING: "‚öôÔ∏è",
                OrderStatus.COMPLETED: "‚úÖ",
                OrderStatus.CANCELLED: "‚ùå"
            }
            
            status_text = {
                OrderStatus.CREATED: "–°—Ç–≤–æ—Ä–µ–Ω–æ",
                OrderStatus.AWAITING_PAYMENT: "–û—á—ñ–∫—É—î –æ–ø–ª–∞—Ç–∏",
                OrderStatus.PAYMENT_CONFIRMED: "–û–ø–ª–∞—Ç—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ",
                OrderStatus.PROCESSING: "–í –æ–±—Ä–æ–±—Ü—ñ",
                OrderStatus.COMPLETED: "–ó–∞–≤–µ—Ä—à–µ–Ω–æ",
                OrderStatus.CANCELLED: "–°–∫–∞—Å–æ–≤–∞–Ω–æ"
            }
            
            text += (
                f"<b>–ó–∞—è–≤–∫–∞ #{order.id}</b> ({order.created_at.strftime('%d.%m.%Y %H:%M')})\n"
                f"–ù–∞–ø—Ä—è–º–æ–∫: {from_currency.code} ‚Üí {to_currency.code}\n"
                f"–°—É–º–∞: {order.amount_from:.2f} {from_currency.code} ‚Üí {order.amount_to:.2f} {to_currency.code}\n"
                f"–°—Ç–∞—Ç—É—Å: {status_emoji.get(order.status, '‚ùì')} {status_text.get(order.status, '–ù–µ–≤—ñ–¥–æ–º–æ')}\n\n"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫
            if order.status in [OrderStatus.CREATED, OrderStatus.AWAITING_PAYMENT]:
                builder = InlineKeyboardBuilder()
                builder.row(
                    InlineKeyboardButton(
                        text="üìã –î–µ—Ç–∞–ª—ñ",
                        callback_data=f"order:details:{order.id}"
                    ),
                    InlineKeyboardButton(
                        text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏",
                        callback_data=f"order:cancel:{order.id}"
                    )
                )
                
                await message.answer(text, reply_markup=builder.as_markup())
                text = ""  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∑–∞—è–≤–∫–∏
        
        if text:  # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è —Ç–µ–∫—Å—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
            await message.answer(text)
    
    except Exception as e:
        await message.answer(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞—è–≤–æ–∫: {e}")
    finally:
        session.close()

async def show_order_details(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏"""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞—è–≤–∫–∏ –∏–∑ callback_data
    order_id = int(callback.data.split(":")[2])
    
    engine = callback.bot.get("db_engine")
    session = get_session(engine)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É –∏–∑ –ë–î
        order = session.query(Order).filter_by(id=order_id).first()
        
        if not order:
            await callback.message.answer("–ó–∞—è–≤–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–∞–ª—é—Ç–∞—Ö –∏ –±–∞–Ω–∫–µ
        from_currency = session.query(Currency).filter_by(id=order.from_currency_id).first()
        to_currency = session.query(Currency).filter_by(id=order.to_currency_id).first()
        bank = session.query(Bank).filter_by(id=order.bank_id).first() if order.bank_id else None
        
        status_text = {
            OrderStatus.CREATED: "–°—Ç–≤–æ—Ä–µ–Ω–æ",
            OrderStatus.AWAITING_PAYMENT: "–û—á—ñ–∫—É—î –æ–ø–ª–∞—Ç–∏",
            OrderStatus.PAYMENT_CONFIRMED: "–û–ø–ª–∞—Ç—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ",
            OrderStatus.PROCESSING: "–í –æ–±—Ä–æ–±—Ü—ñ",
            OrderStatus.COMPLETED: "–ó–∞–≤–µ—Ä—à–µ–Ω–æ",
            OrderStatus.CANCELLED: "–°–∫–∞—Å–æ–≤–∞–Ω–æ"
        }
        
        text = (
            f"üìã <b>–î–µ—Ç–∞–ª—ñ –∑–∞—è–≤–∫–∏ #{order.id}</b>\n\n"
            f"–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            f"–ù–∞–ø—Ä—è–º–æ–∫: {from_currency.code} ‚Üí {to_currency.code}\n"
            f"–°—É–º–∞: {order.amount_from:.2f} {from_currency.code} ‚Üí {order.amount_to:.2f} {to_currency.code}\n"
            f"–ö—É—Ä—Å: 1 {from_currency.code} = {order.rate:.2f} {to_currency.code}\n"
        )
        
        if bank:
            text += f"–ë–∞–Ω–∫: {bank.name}\n"
        
        if order.details:
            text += f"–†–µ–∫–≤—ñ–∑–∏—Ç–∏: <code>{order.details}</code>\n"
        
        text += f"–°—Ç–∞—Ç—É—Å: {status_text.get(order.status, '–ù–µ–≤—ñ–¥–æ–º–æ')}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        if order.status == OrderStatus.AWAITING_PAYMENT:
            text += (
                "\n<b>–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è –æ–ø–ª–∞—Ç–∏:</b>\n"
                "1. –í—ñ–¥–ø—Ä–∞–≤—Ç–µ –≤–∫–∞–∑–∞–Ω—É —Å—É–º—É –Ω–∞ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏:\n"
                "<code>–ë—É–¥—É—Ç—å –Ω–∞–¥–∞–Ω—ñ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º</code>\n"
                "2. –ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '–Ø –æ–ø–ª–∞—Ç–∏–≤'\n"
                "3. –î–æ—á–µ–∫–∞–π—Ç–µ—Å—å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–¥ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"
            )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        builder = InlineKeyboardBuilder()
        
        if order.status == OrderStatus.AWAITING_PAYMENT:
            builder.row(
                InlineKeyboardButton(text="üí∞ –Ø –æ–ø–ª–∞—Ç–∏–≤", callback_data=f"order:paid:{order.id}")
            )
        
        if order.status in [OrderStatus.CREATED, OrderStatus.AWAITING_PAYMENT]:
            builder.row(
                InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data=f"order:cancel:{order.id}")
            )
        
        builder.row(
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="order:list")
        )
        
        await callback.message.answer(text, reply_markup=builder.as_markup())
    
    except Exception as e:
        await callback.message.answer(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏: {e}")
    finally:
        session.close()

async def mark_order_as_paid(callback: types.CallbackQuery, session):
    """–û—Ç–º–µ—á–∞–µ—Ç –∑–∞—è–≤–∫—É –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—É—é"""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞—è–≤–∫–∏ –∏–∑ callback_data
    order_id = int(callback.data.split(":")[2])
    
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É –∏–∑ –ë–î
        order = session.query(Order).filter_by(id=order_id).first()
        
        if not order:
            await callback.message.answer("–ó–∞—è–≤–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return
        
        if order.status != OrderStatus.AWAITING_PAYMENT:
            await callback.message.answer("–ù–µ–º–æ–∂–ª–∏–≤–æ –ø–æ–∑–Ω–∞—á–∏—Ç–∏ –∑–∞—è–≤–∫—É —è–∫ –æ–ø–ª–∞—á–µ–Ω—É, –æ—Å–∫—ñ–ª—å–∫–∏ –≤–æ–Ω–∞ –Ω–µ –≤ —Å—Ç–∞—Ç—É—Å—ñ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –æ–ø–ª–∞—Ç–∏.")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        order.status = OrderStatus.PAYMENT_CONFIRMED
        order.updated_at = datetime.utcnow()
        session.commit()
        
        await callback.message.answer(
            "‚úÖ –ó–∞—è–≤–∫—É –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –æ–ø–ª–∞—á–µ–Ω—É!\n\n"
            "–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É —Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞—è–≤–∫—É.\n"
            "–ú–∏ –ø–æ–≤—ñ–¥–æ–º–∏–º–æ –≤–∞—Å –ø—Ä–æ –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É."
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    
    except Exception as e:
        await callback.message.answer(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É –∑–∞—è–≤–∫–∏: {e}")
    finally:
        session.close()

async def cancel_order_by_user(callback: types.CallbackQuery, session):
    """–û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞—è–≤–∫–∏ –∏–∑ callback_data
    order_id = int(callback.data.split(":")[2])
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É –∏–∑ –ë–î
        order = session.query(Order).filter_by(id=order_id).first()
        
        if not order:
            await callback.message.answer("–ó–∞—è–≤–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return
        
        if order.status not in [OrderStatus.CREATED, OrderStatus.AWAITING_PAYMENT]:
            await callback.message.answer("–ù–µ–º–æ–∂–ª–∏–≤–æ —Å–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞—è–≤–∫—É –≤ –ø–æ—Ç–æ—á–Ω–æ–º—É —Å—Ç–∞—Ç—É—Å—ñ.")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        order.status = OrderStatus.CANCELLED
        order.updated_at = datetime.utcnow()
        session.commit()
        
        await callback.message.answer("‚ùå –ó–∞—è–≤–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    
    except Exception as e:
        await callback.message.answer(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ –∑–∞—è–≤–∫–∏: {e}")
    finally:
        session.close()

async def show_orders_list(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫"""
    await callback.answer()
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞—è–≤–æ–∫
    await show_user_orders(callback.message)

def setup(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    # –ö–æ–º–∞–Ω–¥—ã –º–µ–Ω—é
    dp.message.register(show_user_orders, F.text(text="üìã –Ü—Å—Ç–æ—Ä—ñ—è"))

    dp.callback_query.register(show_order_details, lambda c: c.data.startswith("order:details:"))
    dp.callback_query.register(mark_order_as_paid, lambda c: c.data.startswith("order:paid:"))
    dp.callback_query.register(cancel_order_by_user, lambda c: c.data.startswith("order:cancel:"))
    dp.callback_query.register(show_orders_list, lambda c: c.data == "order:list")