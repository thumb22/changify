# handlers/manager.py
from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime
from zoneinfo import ZoneInfo
from typing import Optional, Tuple

from config import MANAGER_IDS
from keyboards.inline import get_order_actions
from keyboards.reply import get_main_keyboard, get_manager_keyboard
from states.manager import ManagerStates
from utils.error_handler import handle_errors
from database.models import Order, OrderStatus, User, UserRole, Currency, Bank, ExchangeRate
import logging

router = Router()
logger = logging.getLogger(__name__)

# Helper function to check if user is manager or admin
def is_authorized(user_role):
    return user_role in [UserRole.MANAGER, UserRole.ADMIN]

def get_order_related_data(order, session) -> Tuple[Optional[User], Optional[Currency], Optional[Currency], Optional[Bank]]:
    user = session.query(User).filter_by(telegram_id=order.user_id).first()
    from_currency = session.query(Currency).filter_by(id=order.from_currency_id).first()
    to_currency = session.query(Currency).filter_by(id=order.to_currency_id).first()
    bank = session.query(Bank).filter_by(id=order.bank_id).first() if order.bank_id else None
    return user, from_currency, to_currency, bank

def format_order_text(order, user, from_currency, to_currency, bank) -> str:
    status_emoji = {
        OrderStatus.CREATED: "üÜï",
        OrderStatus.AWAITING_PAYMENT: "‚è≥",
        OrderStatus.PAYMENT_CONFIRMED: "‚úÖ",
        OrderStatus.COMPLETED: "‚úÖ",
        OrderStatus.CANCELLED: "‚ùå",
    }.get(order.status, "‚ùì")

    text = (
        f"{status_emoji} <b>–ó–∞—è–≤–∫–∞ #{order.id}</b>\n\n"
        f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user.first_name or ''} {user.last_name or ''} "
        f"(@{user.username or '–Ω–µ–º–∞—î'}, ID: {user.telegram_id})\n"
        f"–û–±–º—ñ–Ω: {order.amount_from} {from_currency.code} ‚Üí {order.amount_to:.2f} {to_currency.code}\n"
        f"–ö—É—Ä—Å: 1 {from_currency.code} = {order.rate:.2f} {to_currency.code}\n"
    )
    if bank:
        text += f"–ë–∞–Ω–∫: {bank.name}\n"

    text += (
        f"–†–µ–∫–≤—ñ–∑–∏—Ç–∏: <code>{order.details}</code>\n"
        f"–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        f"–°—Ç–∞—Ç—É—Å: {order.status.value}\n"
    )
    return text

async def notify_user(bot, telegram_id: int, text: str, reply_markup=None):
    try:
        await bot.send_message(
            chat_id=telegram_id,
            text=text,
            parse_mode="HTML",
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"Failed to send notification to user {telegram_id}: {e}")

def get_order_or_respond(callback: types.CallbackQuery, session, order_id: int):
    order = session.query(Order).filter_by(id=order_id).first()
    if not order:
        return None, callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
    return order, None


@router.message(F.text == "üìù –ó–∞—è–≤–∫–∏")
@handle_errors
async def cmd_orders(message: types.Message, db_user: dict, session):
    """Show active orders for manager"""
    if not is_authorized(db_user['role']):
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ. –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤.")
        return
    
    # Get all active orders (created, awaiting_payment, payment_confirmed)
    active_statuses = [
        OrderStatus.CREATED, 
        OrderStatus.AWAITING_PAYMENT, 
        OrderStatus.PAYMENT_CONFIRMED
    ]
    
    orders = session.query(Order).filter(
        Order.status.in_(active_statuses)
    ).order_by(Order.created_at).all()
    
    if not orders:
        await message.answer("–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç.")
        return
    
    for order in orders:
        user, from_currency, to_currency, bank = get_order_related_data(order, session)
        if not user or not from_currency or not to_currency:
            logger.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ –∑–∞—è–≤–∫—É #{order.id} —á–µ—Ä–µ–∑ –≤—ñ–¥—Å—É—Ç–Ω—ñ –¥–∞–Ω—ñ.")
            continue

        
        # Format text for message
        status_emoji = {
            OrderStatus.CREATED: "üÜï",
            OrderStatus.AWAITING_PAYMENT: "‚è≥",
            OrderStatus.PAYMENT_CONFIRMED: "‚úÖ",
        }.get(order.status, "‚ùì")
        
        order_text = format_order_text(order, user, from_currency, to_currency, bank)

        
        if bank:
            order_text += f"–ë–∞–Ω–∫: {bank.name}\n"
        
        order_text += f"–†–µ–∫–≤—ñ–∑–∏—Ç–∏: <code>{order.details}</code>\n"
        order_text += f"–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        order_text += f"–°—Ç–∞—Ç—É—Å: {order.status.value}\n"
        
        builder = InlineKeyboardBuilder()
        
        if order.status == OrderStatus.CREATED:
            builder.row(
                types.InlineKeyboardButton(
                    text="‚úÖ –ü—Ä–∏–π–Ω—è—Ç–∏",
                    callback_data=f"manager:accept:{order.id}"
                ),
                types.InlineKeyboardButton(
                    text="‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏",
                    callback_data=f"manager:reject:{order.id}"
                )
            )
        elif order.status == OrderStatus.AWAITING_PAYMENT:
            builder.row(
                types.InlineKeyboardButton(
                    text="üí∞ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –æ–ø–ª–∞—Ç—É",
                    callback_data=f"manager:confirm_payment:{order.id}"
                ),
                types.InlineKeyboardButton(
                    text="‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏",
                    callback_data=f"manager:reject:{order.id}"
                )
            )
        elif order.status == OrderStatus.PAYMENT_CONFIRMED:
            builder.row(
                types.InlineKeyboardButton(
                    text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏",
                    callback_data=f"manager:complete:{order.id}"
                ),
                types.InlineKeyboardButton(
                    text="‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏",
                    callback_data=f"manager:reject:{order.id}"
                )
            )
        
        await message.answer(order_text, reply_markup=builder.as_markup())

@router.callback_query(F.data.startswith("manager:accept:"))
@handle_errors
async def accept_order(callback: types.CallbackQuery, db_user: dict, session):
    """Accept an order and set it to awaiting payment"""
    if not is_authorized(db_user['role']):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ")
        return
    
    order_id = int(callback.data.split(":")[2])
    order = session.query(Order).filter_by(id=order_id).first()
    
    if not order:
        await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
        return
    
    if order.status != OrderStatus.CREATED:
        await callback.answer(f"–ó–∞—è–≤–∫–∞ –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Å—Ç–∞—Ç—É—Å—ñ: {order.status.value}")
        return
    
    # Update order status and assign manager
    order.status = OrderStatus.AWAITING_PAYMENT
    order.manager_id = db_user['telegram_id']
    order.updated_at = datetime.now(ZoneInfo("Europe/Kyiv"))
    
    # Get payment info (this would typically be your company's wallet or bank account)
    from_currency = session.query(Currency).filter_by(id=order.from_currency_id).first()
    payment_info = "USDT TRC20: TVN37WBipHFz1SHZw8rPLNZLhTwRXTvpPu"  # Example payment details
    
    # Save the payment info to the order
    order.payment_details = payment_info
    session.commit()
    
    # Notify customer
    user = session.query(User).filter_by(telegram_id=order.user_id).first()
    
    customer_notification = (
        f"‚úÖ <b>–ó–∞—è–≤–∫—É #{order.id} –ø—Ä–∏–π–Ω—è—Ç–æ!</b>\n\n"
        f"–î–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ {order.amount_from} {from_currency.code} –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω—ñ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏:\n\n"
        f"<code>{payment_info}</code>\n\n"
        f"–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '–Ø –æ–ø–ª–∞—Ç–∏–≤' —É –¥–µ—Ç–∞–ª—è—Ö –∑–∞—è–≤–∫–∏."
    )
    
    try:
        await notify_user(
            bot=callback.bot,
            telegram_id=user.telegram_id,
            text=customer_notification,
            reply_markup=get_order_actions(order.id, OrderStatus.AWAITING_PAYMENT.value)
        )
    except Exception as e:
        logger.error(f"Failed to send notification to user {user.telegram_id}: {e}")
    
    await callback.message.edit_text(
        f"{callback.message.text}\n\n‚úÖ –ó–∞—è–≤–∫—É –ø—Ä–∏–π–Ω—è—Ç–æ. –ö–ª—ñ—î–Ω—Ç—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏.",
        reply_markup=None
    )
    
    await callback.answer("–ó–∞—è–≤–∫—É –ø—Ä–∏–π–Ω—è—Ç–æ")

@router.callback_query(F.data.startswith("manager:confirm_payment:"))
@handle_errors
async def confirm_payment(callback: types.CallbackQuery, db_user: dict, session):
    """Confirm payment received for an order"""
    if not is_authorized(db_user['role']):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ")
        return
    
    order_id = int(callback.data.split(":")[2])
    order = session.query(Order).filter_by(id=order_id).first()
    
    if not order:
        await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
        return
    
    if order.status != OrderStatus.AWAITING_PAYMENT:
        await callback.answer(f"–ó–∞—è–≤–∫–∞ –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Å—Ç–∞—Ç—É—Å—ñ: {order.status.value}")
        return
    
    # Update order status
    order.status = OrderStatus.PAYMENT_CONFIRMED
    order.updated_at = datetime.now(ZoneInfo("Europe/Kyiv"))
    session.commit()
    
    # Notify customer
    user = session.query(User).filter_by(telegram_id=order.user_id).first()
    to_currency = session.query(Currency).filter_by(id=order.to_currency_id).first()
    
    customer_notification = (
        f"‚úÖ <b>–û–ø–ª–∞—Ç—É –¥–ª—è –∑–∞—è–≤–∫–∏ #{order.id} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!</b>\n\n"
        f"–ú–∏ –æ–±—Ä–æ–±–ª—è—î–º–æ –≤–∞—à –æ–±–º—ñ–Ω —ñ —Å–∫–æ—Ä–æ –≤—ñ–¥–ø—Ä–∞–≤–∏–º–æ {order.amount_to:.2f} {to_currency.code} "
        f"–Ω–∞ –≤–∫–∞–∑–∞–Ω—ñ –≤–∞–º–∏ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏."
    )
    
    try:
        await callback.bot.send_message(
            chat_id=user.telegram_id,
            text=customer_notification,
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Failed to send notification to user {user.telegram_id}: {e}")
    
    # Update the callback message
    await callback.message.edit_text(
        f"{callback.message.text}\n\n‚úÖ –û–ø–ª–∞—Ç—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ. –ö–ª—ñ—î–Ω—Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–æ.",
        reply_markup=InlineKeyboardBuilder().row(
            types.InlineKeyboardButton(
                text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏",
                callback_data=f"manager:complete:{order.id}"
            )
        ).as_markup()
    )
    
    await callback.answer("–û–ø–ª–∞—Ç—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ")

@router.callback_query(F.data.startswith("manager:complete:"))
@handle_errors
async def complete_order(callback: types.CallbackQuery, db_user: dict, session):
    """Complete an order after sending funds to the customer"""
    if not is_authorized(db_user['role']):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ")
        return
    
    order_id = int(callback.data.split(":")[2])
    order = session.query(Order).filter_by(id=order_id).first()
    
    if not order:
        await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
        return
    
    if order.status != OrderStatus.PAYMENT_CONFIRMED:
        await callback.answer(f"–ó–∞—è–≤–∫–∞ –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Å—Ç–∞—Ç—É—Å—ñ: {order.status.value}")
        return
    
    # Update order status
    order.status = OrderStatus.COMPLETED
    order.updated_at = datetime.now(ZoneInfo("Europe/Kyiv"))
    order.completed_at = datetime.now(ZoneInfo("Europe/Kyiv"))
    session.commit()
    
    # Notify customer
    user = session.query(User).filter_by(telegram_id=order.user_id).first()
    to_currency = session.query(Currency).filter_by(id=order.to_currency_id).first()
    
    customer_notification = (
        f"‚úÖ <b>–ó–∞—è–≤–∫—É #{order.id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n"
        f"–ú–∏ –≤—ñ–¥–ø—Ä–∞–≤–∏–ª–∏ {order.amount_to:.2f} {to_currency.code} –Ω–∞ –≤–∫–∞–∑–∞–Ω—ñ –≤–∞–º–∏ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏.\n\n"
        f"–î—è–∫—É—î–º–æ –∑–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –Ω–∞—à–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É! –ë—É–¥–µ–º–æ —Ä–∞–¥—ñ –±–∞—á–∏—Ç–∏ –≤–∞—Å –∑–Ω–æ–≤—É."
    )
    
    try:
        await callback.bot.send_message(
            chat_id=user.telegram_id,
            text=customer_notification,
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Failed to send notification to user {user.telegram_id}: {e}")
    
    # Update the callback message
    await callback.message.edit_text(
        f"{callback.message.text}\n\n‚úÖ –ó–∞—è–≤–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ö–ª—ñ—î–Ω—Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–æ.",
        reply_markup=None
    )
    
    await callback.answer("–ó–∞—è–≤–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

@router.callback_query(F.data.startswith("manager:reject:"))
@handle_errors
async def reject_order(callback: types.CallbackQuery, db_user: dict, session):
    """Reject or cancel an order"""
    if not is_authorized(db_user['role']):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ")
        return
    
    order_id = int(callback.data.split(":")[2])
    order = session.query(Order).filter_by(id=order_id).first()
    
    if not order:
        await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
        return
    
    if order.status in [OrderStatus.COMPLETED, OrderStatus.CANCELLED]:
        await callback.answer(f"–ó–∞—è–≤–∫–∞ –≤–∂–µ –≤ –∫—ñ–Ω—Ü–µ–≤–æ–º—É —Å—Ç–∞—Ç—É—Å—ñ: {order.status.value}")
        return
    
    # Update order status
    order.status = OrderStatus.CANCELLED
    order.updated_at = datetime.now(ZoneInfo("Europe/Kyiv"))
    session.commit()
    
    # Notify customer
    user = session.query(User).filter_by(telegram_id=order.user_id).first()
    
    customer_notification = (
        f"‚ùå <b>–ó–∞—è–≤–∫—É #{order.id} —Å–∫–∞—Å–æ–≤–∞–Ω–æ</b>\n\n"
        f"–Ø–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–ª–∏ –ø–∏—Ç–∞–Ω–Ω—è, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ —á–µ—Ä–µ–∑ –º–µ–Ω—é '–ü—ñ–¥—Ç—Ä–∏–º–∫–∞'."
    )
    
    try:
        await callback.bot.send_message(
            chat_id=user.telegram_id,
            text=customer_notification,
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Failed to send notification to user {user.telegram_id}: {e}")
    
    # Update the callback message
    await callback.message.edit_text(
        f"{callback.message.text}\n\n‚ùå –ó–∞—è–≤–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –ö–ª—ñ—î–Ω—Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–æ.",
        reply_markup=None
    )
    
    await callback.answer("–ó–∞—è–≤–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ")

@router.message(F.text == "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω—ñ")
@handle_errors
async def cmd_completed_orders(message: types.Message, db_user: dict, session):
    """Show completed orders"""
    if not is_authorized(db_user['role']):
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ. –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤.")
        return
    
    # Get completed orders
    completed_orders = session.query(Order).filter(
        Order.status == OrderStatus.COMPLETED
    ).order_by(Order.completed_at.desc()).limit(10).all()
    
    if not completed_orders:
        await message.answer("–ù–µ–º–∞—î –∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö –∑–∞—è–≤–æ–∫.")
        return
    
    text = "‚úÖ <b>–û—Å—Ç–∞–Ω–Ω—ñ –∑–∞–≤–µ—Ä—à–µ–Ω—ñ –∑–∞—è–≤–∫–∏:</b>\n\n"
    
    for order in completed_orders:
        user = session.query(User).filter_by(telegram_id=order.user_id).first()
        from_currency = session.query(Currency).filter_by(id=order.from_currency_id).first()
        to_currency = session.query(Currency).filter_by(id=order.to_currency_id).first()
        
        text += (
            f"<b>–ó–∞—è–≤–∫–∞ #{order.id}</b> ({order.completed_at.strftime('%d.%m.%Y %H:%M')})\n"
            f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user.first_name or ''} (@{user.username or '–Ω–µ–º–∞—î'})\n"
            f"–û–±–º—ñ–Ω: {order.amount_from} {from_currency.code} ‚Üí {order.amount_to:.2f} {to_currency.code}\n\n"
        )
    
    await message.answer(text, parse_mode="HTML")

@router.message(Command("reply"))
@handle_errors
async def cmd_reply_to_user(message: types.Message, db_user: dict, session):
    """Reply to user support message"""
    if not is_authorized(db_user['role']):
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ. –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤.")
        return
    
    # Parse command: /reply user_id message
    command_parts = message.text.split(maxsplit=2)
    if len(command_parts) < 3:
        await message.answer("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /reply USER_ID –¢–ï–ö–°–¢_–ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø")
        return
    
    try:
        user_id = int(command_parts[1])
        reply_text = command_parts[2]
    except ValueError:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /reply USER_ID –¢–ï–ö–°–¢_–ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø")
        return
    
    # Check if user exists
    user = session.query(User).filter_by(telegram_id=user_id).first()
    if not user:
        await message.answer(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ ID {user_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")
        return
    
    # Send reply to user - with information about continuing the conversation
    try:
        keyboard = types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton(text="üîô –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —á–∞—Ç –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é")]
            ],
            resize_keyboard=True
        )
        
        await message.bot.send_message(
            chat_id=user_id,
            text=f"üì¨ <b>–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏:</b>\n\n{reply_text}\n\n"
                 f"–í–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥, –ø—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—Å–ª–∞–≤—à–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å.",
            parse_mode="HTML",
            reply_markup=keyboard
        )
        
        # We don't try to directly modify the FSM state here
        # The user's state will be properly set when they respond to this message
        
        await message.answer(f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}. "
                             f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–æ–∂–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ.")
        
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

@router.message(Command("close_chat"))
@handle_errors
async def cmd_close_chat(message: types.Message, db_user: dict, session):
    """Close an active support chat with a user"""
    if not is_authorized(db_user['role']):
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ. –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤.")
        return
    
    # Parse command: /close_chat user_id [optional message]
    command_parts = message.text.split(maxsplit=2)
    if len(command_parts) < 2:
        await message.answer("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /close_chat USER_ID [–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è]")
        return
    
    try:
        user_id = int(command_parts[1])
        optional_message = command_parts[2] if len(command_parts) > 2 else "–ß–∞—Ç –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –±—É–ª–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º."
    except ValueError:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /close_chat USER_ID [–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è]")
        return
    
    # Check if user exists
    user = session.query(User).filter_by(telegram_id=user_id).first()
    if not user:
        await message.answer(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ ID {user_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")
        return
    
    # Send final message to user
    try:
        await message.bot.send_message(
            chat_id=user_id,
            text=f"üì¨ <b>–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏:</b>\n\n{optional_message}\n\n"
                 f"–ß–∞—Ç –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –Ø–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–Ω—É—Ç—å –Ω–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è, –≤–∏ –∑–∞–≤–∂–¥–∏ –º–æ–∂–µ—Ç–µ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.",
            parse_mode="HTML",
            reply_markup=get_main_keyboard()
        )
        
        # We don't try to directly modify Redis storage
        # Instead, we rely on the user's next interaction with the bot
        
        # Notify other managers that this chat was closed
        manager_name = message.from_user.first_name or ""
        manager_username = message.from_user.username or "–Ω–µ–º–∞—î"
        user_first_name = user.first_name or ""
        user_username = user.username or "–Ω–µ–º–∞—î"
        
        chat_closed_notification = (
            f"üîî <b>–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏</b>\n\n"
            f"–ú–µ–Ω–µ–¥–∂–µ—Ä {manager_name} (@{manager_username}) "
            f"–∑–∞–≤–µ—Ä—à–∏–≤ —á–∞—Ç –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {user_first_name} (@{user_username}, ID: {user_id})."
        )
        
        for manager_id in MANAGER_IDS:
            if manager_id != message.from_user.id:  # Don't send to the closing manager
                try:
                    await message.bot.send_message(
                        chat_id=manager_id,
                        text=chat_closed_notification,
                        parse_mode="HTML"
                    )
                except Exception as e:
                    print(f"Failed to send notification to manager {manager_id}: {e}")
        
        await message.answer(f"‚úÖ –ß–∞—Ç –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {user_id} —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
        
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ —á–∞—Ç—É: {e}")

def setup(dp):
    dp.include_router(router)