from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime
from zoneinfo import ZoneInfo
from typing import Optional, Tuple

from config import MANAGER_IDS
from keyboards.inline import get_order_actions
from keyboards.reply import get_main_keyboard, get_manager_keyboard
from states.manager import ManagerStates
from utils.error_handler import handle_errors
from database.models import ORDER_STATUS_LABELS, Order, OrderStatus, User, UserRole, Currency, Bank, ExchangeRate
import logging

router = Router()
logger = logging.getLogger(__name__)

# Helper function to check if user is manager or admin
def is_authorized(user_role):
    return user_role in [UserRole.MANAGER, UserRole.ADMIN]

def get_order_related_data(order, session) -> Tuple[Optional[User], Optional[Currency], Optional[Currency], Optional[Bank]]:
    user = session.query(User).filter_by(telegram_id=order.user_id).first()
    from_currency = session.query(Currency).filter_by(id=order.from_currency_id).first()
    to_currency = session.query(Currency).filter_by(id=order.to_currency_id).first()
    bank = session.query(Bank).filter_by(id=order.bank_id).first() if order.bank_id else None
    return user, from_currency, to_currency, bank

def format_order_text(order, user, from_currency, to_currency, bank) -> str:
    status_emoji = {
        OrderStatus.CREATED: "üÜï",
        OrderStatus.AWAITING_PAYMENT: "‚è≥",
        OrderStatus.PAYMENT_CONFIRMED: "‚úÖ",
        OrderStatus.COMPLETED: "‚úÖ",
        OrderStatus.CANCELLED: "‚ùå",
    }.get(order.status, "‚ùì")

    text = (
        f"{status_emoji} <b>–ó–∞—è–≤–∫–∞ #{order.id}</b>\n\n"
        f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user.first_name or ''} {user.last_name or ''} "
        f"(@{user.username or '–Ω–µ–º–∞—î'}, ID: {user.telegram_id})\n"
        f"–û–±–º—ñ–Ω: {order.amount_from} {from_currency.code} ‚Üí {order.amount_to:.2f} {to_currency.code}\n"
        f"–ö—É—Ä—Å: 1 {from_currency.code} = {order.rate:.2f} {to_currency.code}\n"
    )
    if bank:
        text += f"–ë–∞–Ω–∫: {bank.name}\n"

    text += (
        f"–†–µ–∫–≤—ñ–∑–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞: <code>{order.details}</code>\n"
    )
    if order.manager_payment_details:
        text += f"–ü–ª–∞—Ç—ñ–∂–Ω—ñ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: <code>{order.manager_payment_details}</code>\n"

    text += (
        f"–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        f"–°—Ç–∞—Ç—É—Å: {ORDER_STATUS_LABELS[order.status]}\n"
    )
    return text

async def notify_user(bot, telegram_id: int, text: str, reply_markup=None):
    try:
        await bot.send_message(
            chat_id=telegram_id,
            text=text,
            parse_mode="HTML",
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"Failed to send notification to user {telegram_id}: {e}")

def get_order_or_respond(callback: types.CallbackQuery, session, order_id: int):
    order = session.query(Order).filter_by(id=order_id).first()
    if not order:
        return None, callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
    return order, None

@router.message(F.text == "üìù –ó–∞—è–≤–∫–∏")
@handle_errors
async def cmd_orders(message: types.Message, db_user: dict, session):
    if not is_authorized(db_user['role']):
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ. –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤.")
        return
    
    active_statuses = [
        OrderStatus.CREATED, 
        OrderStatus.AWAITING_PAYMENT, 
        OrderStatus.PAYMENT_CONFIRMED
    ]
    
    orders = session.query(Order).filter(
        Order.status.in_(active_statuses)
    ).order_by(Order.created_at).all()
    
    if not orders:
        await message.answer("–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç.")
        return
    
    for order in orders:
        user, from_currency, to_currency, bank = get_order_related_data(order, session)
        if not user or not from_currency or not to_currency:
            logger.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ –∑–∞—è–≤–∫—É #{order.id} —á–µ—Ä–µ–∑ –≤—ñ–¥—Å—É—Ç–Ω—ñ –¥–∞–Ω—ñ.")
            continue
        
        order_text = format_order_text(order, user, from_currency, to_currency, bank)
        builder = InlineKeyboardBuilder()
        
        if order.status == OrderStatus.CREATED:
            builder.row(
                types.InlineKeyboardButton(
                    text="‚úÖ –ü—Ä–∏–π–Ω—è—Ç–∏",
                    callback_data=f"manager:accept:{order.id}"
                ),
                types.InlineKeyboardButton(
                    text="‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏",
                    callback_data=f"manager:reject:{order.id}"
                )
            )
        elif order.status == OrderStatus.AWAITING_PAYMENT:
            builder.row(
                types.InlineKeyboardButton(
                    text="üí∞ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –æ–ø–ª–∞—Ç—É",
                    callback_data=f"manager:confirm_payment:{order.id}"
                ),
                types.InlineKeyboardButton(
                    text="‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏",
                    callback_data=f"manager:reject:{order.id}"
                )
            )
        elif order.status == OrderStatus.PAYMENT_CONFIRMED:
            builder.row(
                types.InlineKeyboardButton(
                    text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏",
                    callback_data=f"manager:complete:{order.id}"
                ),
                types.InlineKeyboardButton(
                    text="‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏",
                    callback_data=f"manager:reject:{order.id}"
                )
            )
        
        order_message = await message.answer(order_text, reply_markup=builder.as_markup())
        order.message_id = order_message.message_id
        session.commit()

@router.callback_query(F.data.startswith("manager:accept:"))
@handle_errors
async def accept_order(callback: types.CallbackQuery, db_user: dict, session, state: FSMContext):
    """Accept an order and prompt for payment details"""
    if not is_authorized(db_user['role']):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ")
        return
    
    order_id = int(callback.data.split(":")[2])
    order = session.query(Order).filter_by(id=order_id).first()
    
    if not order:
        await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
        return
    
    if order.status != OrderStatus.CREATED:
        await callback.answer(f"–ó–∞—è–≤–∫–∞ –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Å—Ç–∞—Ç—É—Å—ñ: {order.status.value}")
        return
    
    # Update order status and assign manager
    order.status = OrderStatus.AWAITING_PAYMENT
    order.manager_id = db_user['telegram_id']
    order.updated_at = datetime.now(ZoneInfo("Europe/Kyiv"))
    session.commit()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º order_id –≤ FSM –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await state.update_data(order_id=order_id)
    await state.set_state(ManagerStates.awaiting_payment_details)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
    await callback.message.answer(
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø–ª–∞—Ç—ñ–∂–Ω—ñ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è —Ü—ñ—î—ó –∑–∞—è–≤–∫–∏:",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[[types.KeyboardButton(text="üîô –°–∫–∞—Å—É–≤–∞—Ç–∏ –≤–≤–µ–¥–µ–Ω–Ω—è —Ä–µ–∫–≤—ñ–∑–∏—Ç—ñ–≤")]],
            resize_keyboard=True
        )
    )
    
    await callback.message.edit_text(
        f"{callback.message.text}\n\n‚è≥ –û—á—ñ–∫—É—î—Ç—å—Å—è –≤–≤–µ–¥–µ–Ω–Ω—è –ø–ª–∞—Ç—ñ–∂–Ω–∏—Ö —Ä–µ–∫–≤—ñ–∑–∏—Ç—ñ–≤.",
        reply_markup=None
    )
    
    await callback.answer("–í–≤–µ–¥—ñ—Ç—å —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏")

@router.callback_query(F.data.startswith("manager:confirm_payment:"))
@handle_errors
async def confirm_payment(callback: types.CallbackQuery, db_user: dict, session):
    """Confirm payment received for an order"""
    if not is_authorized(db_user['role']):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ")
        return
    
    order_id = int(callback.data.split(":")[2])
    order = session.query(Order).filter_by(id=order_id).first()
    
    if not order:
        await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
        return
    
    if order.status != OrderStatus.AWAITING_PAYMENT:
        await callback.answer(f"–ó–∞—è–≤–∫–∞ –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Å—Ç–∞—Ç—É—Å—ñ: {order.status.value}")
        return
    
    # Update order status
    order.status = OrderStatus.PAYMENT_CONFIRMED
    order.updated_at = datetime.now(ZoneInfo("Europe/Kyiv"))
    session.commit()
    
    # Notify customer
    user = session.query(User).filter_by(telegram_id=order.user_id).first()
    to_currency = session.query(Currency).filter_by(id=order.to_currency_id).first()
    
    customer_notification = (
        f"‚úÖ <b>–û–ø–ª–∞—Ç—É –¥–ª—è –∑–∞—è–≤–∫–∏ #{order.id} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!</b>\n\n"
        f"–ú–∏ –æ–±—Ä–æ–±–ª—è—î–º–æ –≤–∞—à –æ–±–º—ñ–Ω —ñ —Å–∫–æ—Ä–æ –≤—ñ–¥–ø—Ä–∞–≤–∏–º–æ {order.amount_to:.2f} {to_currency.code} "
        f"–Ω–∞ –≤–∫–∞–∑–∞–Ω—ñ –≤–∞–º–∏ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏."
    )
    
    try:
        await callback.bot.send_message(
            chat_id=user.telegram_id,
            text=customer_notification,
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Failed to send notification to user {user.telegram_id}: {e}")
    
    # Update the callback message
    await callback.message.edit_text(
        f"{callback.message.text}\n\n‚úÖ –û–ø–ª–∞—Ç—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ. –ö–ª—ñ—î–Ω—Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–æ.",
        reply_markup=InlineKeyboardBuilder().row(
            types.InlineKeyboardButton(
                text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏",
                callback_data=f"manager:complete:{order.id}"
            )
        ).as_markup()
    )
    
    await callback.answer("–û–ø–ª–∞—Ç—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ")

@router.callback_query(F.data.startswith("manager:complete:"))
@handle_errors
async def complete_order(callback: types.CallbackQuery, db_user: dict, session):
    """Complete an order after sending funds to the customer"""
    if not is_authorized(db_user['role']):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ")
        return
    
    order_id = int(callback.data.split(":")[2])
    order = session.query(Order).filter_by(id=order_id).first()
    
    if not order:
        await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
        return
    
    if order.status != OrderStatus.PAYMENT_CONFIRMED:
        await callback.answer(f"–ó–∞—è–≤–∫–∞ –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Å—Ç–∞—Ç—É—Å—ñ: {order.status.value}")
        return
    
    # Update order status
    order.status = OrderStatus.COMPLETED
    order.updated_at = datetime.now(ZoneInfo("Europe/Kyiv"))
    order.completed_at = datetime.now(ZoneInfo("Europe/Kyiv"))
    session.commit()
    
    # Notify customer
    user = session.query(User).filter_by(telegram_id=order.user_id).first()
    to_currency = session.query(Currency).filter_by(id=order.to_currency_id).first()
    
    customer_notification = (
        f"‚úÖ <b>–ó–∞—è–≤–∫—É #{order.id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n"
        f"–ú–∏ –≤—ñ–¥–ø—Ä–∞–≤–∏–ª–∏ {order.amount_to:.2f} {to_currency.code} –Ω–∞ –≤–∫–∞–∑–∞–Ω—ñ –≤–∞–º–∏ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏.\n\n"
        f"–î—è–∫—É—î–º–æ –∑–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –Ω–∞—à–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É! –ë—É–¥–µ–º–æ —Ä–∞–¥—ñ –±–∞—á–∏—Ç–∏ –≤–∞—Å –∑–Ω–æ–≤—É."
    )
    
    try:
        await callback.bot.send_message(
            chat_id=user.telegram_id,
            text=customer_notification,
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Failed to send notification to user {user.telegram_id}: {e}")
    
    # Update the callback message
    await callback.message.edit_text(
        f"{callback.message.text}\n\n‚úÖ –ó–∞—è–≤–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ö–ª—ñ—î–Ω—Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–æ.",
        reply_markup=None
    )
    
    await callback.answer("–ó–∞—è–≤–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

@router.callback_query(F.data.startswith("manager:reject:"))
@handle_errors
async def reject_order(callback: types.CallbackQuery, db_user: dict, session, state: FSMContext):
    """Initiate rejection of an order and prompt for a comment"""
    if not is_authorized(db_user['role']):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ")
        return
    
    order_id = int(callback.data.split(":")[2])
    order = session.query(Order).filter_by(id=order_id).first()
    
    if not order:
        await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
        return
    
    if order.status in [OrderStatus.COMPLETED, OrderStatus.CANCELLED]:
        await callback.answer(f"–ó–∞—è–≤–∫–∞ –≤–∂–µ –≤ –∫—ñ–Ω—Ü–µ–≤–æ–º—É —Å—Ç–∞—Ç—É—Å—ñ: {order.status.value}")
        return
    
    await state.update_data(order_id=order_id)
    await state.set_state(ManagerStates.awaiting_rejection_comment)
    
    await callback.message.answer(
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –ø—Ä–∏—á–∏–Ω—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏:",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[[types.KeyboardButton(text="üîô –°–∫–∞—Å—É–≤–∞—Ç–∏ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è")]],
            resize_keyboard=True
        )
    )
    
    await callback.answer()

@router.message(ManagerStates.awaiting_rejection_comment)
@handle_errors
async def process_rejection_comment(message: types.Message, db_user: dict, session, state: FSMContext):
    """Process the rejection comment and finalize order cancellation"""
    if not is_authorized(db_user['role']):
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
        return
    
    # Get order_id from FSM context
    data = await state.get_data()
    order_id = data.get("order_id")
    
    if not order_id:
        await message.answer("–ü–æ–º–∏–ª–∫–∞: ID –∑–∞—è–≤–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        await state.clear()
        return
    
    order = session.query(Order).filter_by(id=order_id).first()
    if not order:
        await message.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
        await state.clear()
        return
    
    if message.text == "üîô –°–∫–∞—Å—É–≤–∞—Ç–∏ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è":
        await message.answer("–í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=get_manager_keyboard())
        await state.clear()
        return
    
    # Store the rejection comment
    rejection_reason = message.text
    order.rejection_reason = rejection_reason
    order.status = OrderStatus.CANCELLED
    order.updated_at = datetime.now(ZoneInfo("Europe/Kyiv"))
    session.commit()
    
    # Notify customer
    user = session.query(User).filter_by(telegram_id=order.user_id).first()
    
    customer_notification = (
        f"‚ùå <b>–ó–∞—è–≤–∫—É #{order.id} —Å–∫–∞—Å–æ–≤–∞–Ω–æ</b>\n\n"
        f"–ü—Ä–∏—á–∏–Ω–∞: {rejection_reason}\n\n"
        f"–Ø–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–ª–∏ –ø–∏—Ç–∞–Ω–Ω—è, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ —á–µ—Ä–µ–∑ –º–µ–Ω—é '–ü—ñ–¥—Ç—Ä–∏–º–∫–∞'."
    )
    
    try:
        await message.bot.send_message(
            chat_id=user.telegram_id,
            text=customer_notification,
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Failed to send notification to user {user.telegram_id}: {e}")
    
    # Update the original order message
    try:
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=order.message_id if hasattr(order, 'message_id') else message.message_id,
            text=f"{format_order_text(order, user, *get_order_related_data(order, session)[1:])}\n\n‚ùå –ó–∞—è–≤–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –ü—Ä–∏—á–∏–Ω–∞: {rejection_reason}",
            parse_mode="HTML",
            reply_markup=None
        )
    except Exception as e:
        logger.error(f"Failed to edit original message for order {order.id}: {e}")
    
    await message.answer(
        f"‚úÖ –ó–∞—è–≤–∫—É #{order.id} —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –ö–ª—ñ—î–Ω—Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–æ.",
        reply_markup=get_manager_keyboard()
    )
    
    # Clear FSM state
    await state.clear()

@router.message(F.text == "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω—ñ")
@handle_errors
async def cmd_completed_orders(message: types.Message, db_user: dict, session):
    """Show completed orders"""
    if not is_authorized(db_user['role']):
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ. –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤.")
        return
    
    # Get completed orders
    completed_orders = session.query(Order).filter(
        Order.status == OrderStatus.COMPLETED
    ).order_by(Order.completed_at.desc()).limit(10).all()
    
    if not completed_orders:
        await message.answer("–ù–µ–º–∞—î –∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö –∑–∞—è–≤–æ–∫.")
        return
    
    text = "‚úÖ <b>–û—Å—Ç–∞–Ω–Ω—ñ –∑–∞–≤–µ—Ä—à–µ–Ω—ñ –∑–∞—è–≤–∫–∏:</b>\n\n"
    
    for order in completed_orders:
        user = session.query(User).filter_by(telegram_id=order.user_id).first()
        from_currency = session.query(Currency).filter_by(id=order.from_currency_id).first()
        to_currency = session.query(Currency).filter_by(id=order.to_currency_id).first()
        
        text += (
            f"<b>–ó–∞—è–≤–∫–∞ #{order.id}</b> ({order.completed_at.strftime('%d.%m.%Y %H:%M')})\n"
            f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user.first_name or ''} (@{user.username or '–Ω–µ–º–∞—î'})\n"
            f"–û–±–º—ñ–Ω: {order.amount_from} {from_currency.code} ‚Üí {order.amount_to:.2f} {to_currency.code}\n\n"
        )
    
    await message.answer(text, parse_mode="HTML")

@router.message(Command("reply"))
@handle_errors
async def cmd_reply_to_user(message: types.Message, db_user: dict, session):
    """Reply to user support message"""
    if not is_authorized(db_user['role']):
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ. –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤.")
        return
    
    # Parse command: /reply user_id message
    command_parts = message.text.split(maxsplit=2)
    if len(command_parts) < 3:
        await message.answer("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /reply USER_ID –¢–ï–ö–°–¢_–ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø")
        return
    
    try:
        user_id = int(command_parts[1])
        reply_text = command_parts[2]
    except ValueError:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /reply USER_ID –¢–ï–ö–°–¢_–ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø")
        return
    
    # Check if user exists
    user = session.query(User).filter_by(telegram_id=user_id).first()
    if not user:
        await message.answer(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ ID {user_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")
        return
    
    # Send reply to user - with information about continuing the conversation
    try:
        keyboard = types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton(text="üîô –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —á–∞—Ç –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é")]
            ],
            resize_keyboard=True
        )
        
        await message.bot.send_message(
            chat_id=user_id,
            text=f"üì¨ <b>–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏:</b>\n\n{reply_text}\n\n"
                 f"–í–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥, –ø—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—Å–ª–∞–≤—à–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å.",
            parse_mode="HTML",
            reply_markup=keyboard
        )
        
        await message.answer(f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—àDoppelg√§nger successfully sent the message to user {user_id}. "
                             f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–æ–∂–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ.")
        
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

@router.message(Command("close_chat"))
@handle_errors
async def cmd_close_chat(message: types.Message, db_user: dict, session):
    """Close an active support chat with a user"""
    if not is_authorized(db_user['role']):
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ. –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤.")
        return
    
    # Parse command: /close_chat user_id [optional message]
    command_parts = message.text.split(maxsplit=2)
    if len(command_parts) < 2:
        await message.answer("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /close_chat USER_ID [–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è]")
        return
    
    try:
        user_id = int(command_parts[1])
        optional_message = command_parts[2] if len(command_parts) > 2 else "–ß–∞—Ç –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –±—É–ª–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º."
    except ValueError:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /close_chat USER_ID [–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è]")
        return
    
    # Check if user exists
    user = session.query(User).filter_by(telegram_id=user_id).first()
    if not user:
        await message.answer(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ ID {user_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")
        return
    
    # Send final message to user
    try:
        await message.bot.send_message(
            chat_id=user_id,
            text=f"üì¨ <b>–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏:</b>\n\n{optional_message}\n\n"
                 f"–ß–∞—Ç –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –Ø–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–Ω—É—Ç—å –Ω–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è, –≤–∏ –∑–∞–≤–∂–¥–∏ –º–æ–∂–µ—Ç–µ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.",
            parse_mode="HTML",
            reply_markup=get_main_keyboard()
        )
        
        # Notify other managers that this chat was closed
        manager_name = message.from_user.first_name or ""
        manager_username = message.from_user.username or "–Ω–µ–º–∞—î"
        user_first_name = user.first_name or ""
        user_username = user.username or "–Ω–µ–º–∞—î"
        
        chat_closed_notification = (
            f"üîî <b>–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏</b>\n\n"
            f"–ú–µ–Ω–µ–¥–∂–µ—Ä {manager_name} (@{manager_username}) "
            f"–∑–∞–≤–µ—Ä—à–∏–≤ —á–∞—Ç –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {user_first_name} (@{user_username}, ID: {user_id})."
        )
        
        for manager_id in MANAGER_IDS:
            if manager_id != message.from_user.id:  # Don't send to the closing manager
                try:
                    await message.bot.send_message(
                        chat_id=manager_id,
                        text=chat_closed_notification,
                        parse_mode="HTML"
                    )
                except Exception as e:
                    print(f"Failed to send notification to manager {manager_id}: {e}")
        
        await message.answer(f"‚úÖ –ß–∞—Ç –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {user_id} —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
        
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ —á–∞—Ç—É: {e}")

@router.message(ManagerStates.awaiting_payment_details)
@handle_errors
async def process_payment_details(message: types.Message, db_user: dict, session, state: FSMContext):
    """Process the payment details provided by the manager"""
    if not is_authorized(db_user['role']):
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º order_id –∏–∑ FSM
    data = await state.get_data()
    order_id = data.get("order_id")
    
    if not order_id:
        await message.answer("–ü–æ–º–∏–ª–∫–∞: ID –∑–∞—è–≤–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        await state.clear()
        return
    
    order = session.query(Order).filter_by(id=order_id).first()
    if not order:
        await message.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
        await state.clear()
        return
    
    if message.text == "üîô –°–∫–∞—Å—É–≤–∞—Ç–∏ –≤–≤–µ–¥–µ–Ω–Ω—è —Ä–µ–∫–≤—ñ–∑–∏—Ç—ñ–≤":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞—è–≤–∫—É –≤ —Å—Ç–∞—Ç—É—Å CREATED –∏ –æ—á–∏—â–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        order.status = OrderStatus.CREATED
        order.manager_id = None
        session.commit()
        
        await message.answer(
            "–í–≤–µ–¥–µ–Ω–Ω—è —Ä–µ–∫–≤—ñ–∑–∏—Ç—ñ–≤ —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –ó–∞—è–≤–∫–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∞ –¥–æ —Å—Ç–∞—Ç—É—Å—É '–°—Ç–≤–æ—Ä–µ–Ω–∞'.",
            reply_markup=get_manager_keyboard()
        )
        await state.clear()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –≤ –Ω–æ–≤–æ–µ –ø–æ–ª–µ
    manager_payment_details = message.text
    order.manager_payment_details = manager_payment_details
    session.commit()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    user = session.query(User).filter_by(telegram_id=order.user_id).first()
    from_currency = session.query(Currency).filter_by(id=order.from_currency_id).first()
    
    customer_notification = (
        f"‚úÖ <b>–ó–∞—è–≤–∫—É #{order.id} –ø—Ä–∏–π–Ω—è—Ç–æ!</b>\n\n"
        f"–î–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ {order.amount_from} {from_currency.code} –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω—ñ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏:\n\n"
        f"<code>{manager_payment_details}</code>\n\n"
        f"–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '–Ø –æ–ø–ª–∞—Ç–∏–≤' —É –¥–µ—Ç–∞–ª—è—Ö –∑–∞—è–≤–∫–∏."
    )
    
    try:
        await notify_user(
            bot=message.bot,
            telegram_id=user.telegram_id,
            text=customer_notification,
            reply_markup=get_order_actions(order.id, OrderStatus.AWAITING_PAYMENT.value)
        )
    except Exception as e:
        logger.error(f"Failed to send notification to user {user.telegram_id}: {e}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    try:
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=order.message_id if hasattr(order, 'message_id') else message.message_id,
            text=f"{format_order_text(order, user, *get_order_related_data(order, session)[1:])}\n\n‚úÖ –ó–∞—è–≤–∫—É –ø—Ä–∏–π–Ω—è—Ç–æ. –ö–ª—ñ—î–Ω—Ç—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏.",
            parse_mode="HTML",
            reply_markup=None
        )
    except Exception as e:
        logger.error(f"Failed to edit original message for order {order.id}: {e}")
    
    await message.answer(
        f"‚úÖ –†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –∑–∞—è–≤–∫–∏ #{order.id} –∑–±–µ—Ä–µ–∂–µ–Ω–æ —Ç–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–ª—ñ—î–Ω—Ç—É.",
        reply_markup=get_manager_keyboard()
    )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

def setup(dp):
    dp.include_router(router)