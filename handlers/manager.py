from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, ConversationHandler, CommandHandler, MessageHandler, CallbackQueryHandler, filters

from database import db_session
from database.models import User, Order, SupportRequest
from keyboards import get_manager_keyboard, get_main_keyboard
from utils import manager_required

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
MANAGER_MAIN, VIEWING_ORDERS, VIEWING_REQUESTS, PROCESSING_ORDER, REPLYING_TO_REQUEST = range(5)

@manager_required
async def manager_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    with db_session() as session:
        pending_orders_count = session.query(Order).filter(
            Order.status.in_(["new", "paid"])
        ).count()
        
        pending_requests_count = session.query(SupportRequest).filter(
            SupportRequest.status == "pending"
        ).count()
    
    await update.message.reply_text(
        f"üë®‚Äçüíº <b>–ü–∞–Ω–µ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞</b>\n\n"
        f"–ê–∫—Ç–∏–≤–Ω—ñ –∑–∞—è–≤–∫–∏: <b>{pending_orders_count}</b>\n"
        f"–ó–∞–ø–∏—Ç–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏: <b>{pending_requests_count}</b>\n\n"
        f"–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:",
        reply_markup=get_manager_keyboard(),
        parse_mode="HTML"
    )
    
    return MANAGER_MAIN

async def view_orders(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫"""
    query = update.callback_query
    
    # –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –æ—Ç Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    if query:
        await query.answer()
        message = query.message
    else:
        message = update.message
    
    context.user_data["page"] = context.user_data.get("page", 0)
    page = context.user_data["page"]
    
    with db_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫
        total_orders = session.query(Order).filter(
            Order.status.in_(["new", "paid"])
        ).count()
        
        if total_orders == 0:
            if query:
                await query.edit_message_text(
                    "–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞—è–≤–æ–∫.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_manager")
                    ]])
                )
            else:
                await message.reply_text(
                    "–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞—è–≤–æ–∫.",
                    reply_markup=get_manager_keyboard()
                )
            return MANAGER_MAIN
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (5 –∑–∞—è–≤–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É)
        orders = session.query(Order).filter(
            Order.status.in_(["new", "paid"])
        ).order_by(Order.created_at.desc()).offset(page * 5).limit(5).all()
        
        orders_text = f"üìã <b>–ê–∫—Ç–∏–≤–Ω—ñ –∑–∞—è–≤–∫–∏</b> (–°—Ç–æ—Ä—ñ–Ω–∫–∞ {page + 1}/{(total_orders - 1) // 5 + 1})\n\n"
        
        for order in orders:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user = session.query(User).filter(User.id == order.user_id).first()
            
            status_emoji = "üÜï" if order.status == "new" else "üí∞" if order.status == "paid" else "‚è≥"
            
            orders_text += f"<b>–ó–∞—è–≤–∫–∞ #{order.id}</b> {status_emoji} {order.status.upper()}\n"
            orders_text += f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user.first_name} (ID: {user.telegram_id})\n"
            orders_text += f"üí± {order.currency_from} ‚Üí {order.currency_to}\n"
            orders_text += f"üí≤ –°—É–º–∞: {order.amount_from} {order.currency_from}\n"
            
            if order.bank_method:
                orders_text += f"üè¶ –ë–∞–Ω–∫/—Å–ø–æ—Å—ñ–±: {order.bank_method}\n"
            
            orders_text += f"üìÖ –°—Ç–≤–æ—Ä–µ–Ω–æ: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = [
        [InlineKeyboardButton("–ü–æ–¥—Ä–æ–±–∏—Ü—ñ", callback_data=f"order_{orders[0].id}")] if orders else []
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—è", callback_data="prev_page"))
    
    if total_orders > (page + 1) * 5:
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è –ù–∞—Å—Ç—É–ø–Ω–∞", callback_data="next_page"))
    
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_manager")])
    
    if query:
        await query.edit_message_text(
            orders_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="HTML"
        )
    else:
        await message.reply_text(
            orders_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="HTML"
        )
    
    return VIEWING_ORDERS

async def handle_order_navigation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "prev_page":
        context.user_data["page"] = max(0, context.user_data.get("page", 0) - 1)
    elif query.data == "next_page":
        context.user_data["page"] = context.user_data.get("page", 0) + 1
    elif query.data == "back_to_manager":
        return await manager_command(update, context)
    
    return await view_orders(update, context)

async def view_order_details(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è"""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞—è–≤–∫–∏ –∏–∑ callback_data
    order_id = int(query.data.split('_')[1])
    
    with db_session() as session:
        order = session.query(Order).filter(Order.id == order_id).first()
        
        if not order:
            await query.edit_message_text(
                "–ó–∞—è–≤–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_orders")
                ]])
            )
            return VIEWING_ORDERS
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = session.query(User).filter(User.id == order.user_id).first()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
        details_text = f"üìù <b>–î–µ—Ç–∞–ª—ñ –∑–∞—è–≤–∫–∏ #{order.id}</b>\n\n"
        details_text += f"<b>–°—Ç–∞—Ç—É—Å:</b> {order.status.upper()}\n"
        details_text += f"<b>–°—Ç–≤–æ—Ä–µ–Ω–æ:</b> {order.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
        
        details_text += f"<b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:</b> {user.first_name}\n"
        details_text += f"<b>Telegram ID:</b> {user.telegram_id}\n"
        
        if user.contact_info:
            details_text += f"<b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:</b> {user.contact_info}\n\n"
        else:
            details_text += "<b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:</b> –ù–µ –≤–∫–∞–∑–∞–Ω–∞\n\n"
        
        details_text += f"<b>–ù–∞–ø—Ä—è–º–æ–∫ –æ–±–º—ñ–Ω—É:</b> {order.currency_from} ‚Üí {order.currency_to}\n"
        details_text += f"<b>–°—É–º–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è:</b> {order.amount_from} {order.currency_from}\n"
        details_text += f"<b>–°—É–º–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è:</b> {order.amount_to} {order.currency_to}\n"
        details_text += f"<b>–ö—É—Ä—Å:</b> {order.rate}\n"
        
        if order.bank_method:
            details_text += f"<b>–ë–∞–Ω–∫/—Å–ø–æ—Å—ñ–±:</b> {order.bank_method}\n"
        
        if order.payment_details:
            details_text += f"\n<b>–î–µ—Ç–∞–ª—ñ –æ–ø–ª–∞—Ç–∏:</b>\n{order.payment_details}\n"
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏
        keyboard = []
        
        if order.status == "new":
            keyboard.append([
                InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞—è–≤–∫—É", callback_data=f"confirm_{order.id}"),
                InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject_{order.id}")
            ])
        elif order.status == "paid":
            keyboard.append([
                InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–∞—è–≤–∫—É", callback_data=f"complete_{order.id}"),
                InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject_{order.id}")
            ])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ —Å–ø–∏—Å–∫—É", callback_data="back_to_orders")])
    
    await query.edit_message_text(
        details_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="HTML"
    )
    
    return PROCESSING_ORDER

async def process_order_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å –∑–∞—è–≤–∫–æ–π"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "back_to_orders":
        context.user_data["page"] = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        return await view_orders(update, context)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∏ ID –∑–∞—è–≤–∫–∏
    action, order_id = query.data.split('_')
    order_id = int(order_id)
    
    with db_session() as session:
        order = session.query(Order).filter(Order.id == order_id).first()
        
        if not order:
            await query.edit_message_text(
                "–ó–∞—è–≤–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_orders")
                ]])
            )
            return VIEWING_ORDERS
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        user = session.query(User).filter(User.id == order.user_id).first()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        if action == "confirm":
            order.status = "confirmed"
            status_message = "‚úÖ –ó–∞—è–≤–∫—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ"
            user_message = (
                f"‚úÖ –í–∞—à—É –∑–∞—è–≤–∫—É #{order.id} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º!\n\n"
                f"–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ–Ω–∞–π—Ç–µ –æ–ø–ª–∞—Ç—É –∑–≥—ñ–¥–Ω–æ –∑ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è–º–∏ —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å "
                f"–∫–Ω–æ–ø–∫—É \"–Ø –æ–ø–ª–∞—Ç–∏–≤\" —É –≤–∞—à–æ–º—É –º–µ–Ω—é –∑–∞—è–≤–æ–∫."
            )
        elif action == "complete":
            order.status = "completed"
            status_message = "‚úÖ –ó–∞—è–≤–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
            user_message = (
                f"üéâ –í–∞—à—É –∑–∞—è–≤–∫—É #{order.id} —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n"
                f"–î—è–∫—É—î–º–æ –∑–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –Ω–∞—à–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É."
            )
        elif action == "reject":
            order.status = "rejected"
            status_message = "‚ùå –ó–∞—è–≤–∫—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ"
            user_message = (
                f"‚ùå –ù–∞ –∂–∞–ª—å, –≤–∞—à—É –∑–∞—è–≤–∫—É #{order.id} –±—É–ª–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.\n\n"
                f"–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º."
            )
        
        session.commit()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        await context.bot.send_message(
            chat_id=user.telegram_id,
            text=user_message,
            parse_mode="HTML"
        )
    except Exception as e:
        print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user.telegram_id}: {e}")
    
    # –°–æ–æ–±—â–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—É –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
    await query.edit_message_text(
        f"{status_message} (ID: {order_id}).\n"
        f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –æ—Ç—Ä–∏–º–∞–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É.",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ —Å–ø–∏—Å–∫—É", callback_data="back_to_orders")
        ]])
    )
    
    return PROCESSING_ORDER

async def view_support_requests(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"""
    query = update.callback_query
    
    # –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –æ—Ç Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    if query:
        await query.answer()
        message = query.message
    else:
        message = update.message
    
    context.user_data["support_page"] = context.user_data.get("support_page", 0)
    page = context.user_data["support_page"]
    
    with db_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
        total_requests = session.query(SupportRequest).filter(
            SupportRequest.status == "pending"
        ).count()
        
        if total_requests == 0:
            if query:
                await query.edit_message_text(
                    "–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤ —É –ø—ñ–¥—Ç—Ä–∏–º–∫—É.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_manager")
                    ]])
                )
            else:
                await message.reply_text(
                    "–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤ —É –ø—ñ–¥—Ç—Ä–∏–º–∫—É.",
                    reply_markup=get_manager_keyboard()
                )
            return MANAGER_MAIN
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (5 –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É)
        requests = session.query(SupportRequest).filter(
            SupportRequest.status == "pending"
        ).order_by(SupportRequest.created_at.desc()).offset(page * 5).limit(5).all()
        
        requests_text = f"üìã <b>–ê–∫—Ç–∏–≤–Ω—ñ –∑–∞–ø–∏—Ç–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏</b> (–°—Ç–æ—Ä—ñ–Ω–∫–∞ {page + 1}/{(total_requests - 1) // 5 + 1})\n\n"
        
        for req in requests:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user = session.query(User).filter(User.id == req.user_id).first()
            
            requests_text += f"<b>–ó–∞–ø–∏—Ç #{req.id}</b>\n"
            requests_text += f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user.first_name} (ID: {user.telegram_id})\n"
            requests_text += f"üìÖ –°—Ç–≤–æ—Ä–µ–Ω–æ: {req.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            requests_text += f"üí¨ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {req.message[:100]}{'...' if len(req.message) > 100 else ''}\n\n"
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = [
        [InlineKeyboardButton("–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏", callback_data=f"reply_{requests[0].id}")] if requests else []
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—è", callback_data="prev_support_page"))
    
    if total_requests > (page + 1) * 5:
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è –ù–∞—Å—Ç—É–ø–Ω–∞", callback_data="next_support_page"))
    
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_manager")])
    
    if query:
        await query.edit_message_text(
            requests_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="HTML"
        )
    else:
        await message.reply_text(
            requests_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="HTML"
        )
    
    return VIEWING_REQUESTS

async def handle_support_navigation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —Å–ø–∏—Å–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "prev_support_page":
        context.user_data["support_page"] = max(0, context.user_data.get("support_page", 0) - 1)
    elif query.data == "next_support_page":
        context.user_data["support_page"] = context.user_data.get("support_page", 0) + 1
    elif query.data == "back_to_manager":
        return await manager_command(update, context)
    
    return await view_support_requests(update, context)

async def start_reply_to_request(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–ø—Ä–æ—Å–∞ –∏–∑ callback_data
    request_id = int(query.data.split('_')[1])
    context.user_data["current_request_id"] = request_id
    
    with db_session() as session:
        request = session.query(SupportRequest).filter(SupportRequest.id == request_id).first()
        
        if not request:
            await query.edit_message_text(
                "–ó–∞–ø–∏—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_requests")
                ]])
            )
            return VIEWING_REQUESTS
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = session.query(User).filter(User.id == request.user_id).first()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ
        request_text = f"üìù <b>–ó–∞–ø–∏—Ç #{request.id}</b>\n\n"
        request_text += f"<b>–í—ñ–¥:</b> {user.first_name} (ID: {user.telegram_id})\n"
        request_text += f"<b>–°—Ç–≤–æ—Ä–µ–Ω–æ:</b> {request.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
        request_text += f"<b>–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:</b>\n{request.message}\n\n"
        request_text += "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∑–∞–ø–∏—Ç –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–°–∫–∞—Å—É–≤–∞—Ç–∏':"
    
    await query.edit_message_text(
        request_text,
        parse_mode="HTML"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è –æ—Ç–º–µ–Ω—ã
    await context.bot.send_message(
        chat_id=update.effective_user.id,
        text="–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å:",
        reply_markup=ReplyKeyboardMarkup([["–°–∫–∞—Å—É–≤–∞—Ç–∏"]], resize_keyboard=True)
    )
    
    return REPLYING_TO_REQUEST

async def process_reply(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    reply_text = update.message.text
    request_id = context.user_data.get("current_request_id")
    
    if not request_id:
        await update.message.reply_text(
            "–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ ID –∑–∞–ø–∏—Ç—É. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.",
            reply_markup=get_manager_keyboard()
        )
        return MANAGER_MAIN
    
    if reply_text == "–°–∫–∞—Å—É–≤–∞—Ç–∏":
        await update.message.reply_text(
            "–í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–∫–∞—Å–æ–≤–∞–Ω–æ.",
            reply_markup=get_manager_keyboard()
        )
        return MANAGER_MAIN
    
    with db_session() as session:
        request = session.query(SupportRequest).filter(SupportRequest.id == request_id).first()
        
        if not request:
            await update.message.reply_text(
                "–ó–∞–ø–∏—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.",
                reply_markup=get_manager_keyboard()
            )
            return MANAGER_MAIN
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = session.query(User).filter(User.id == request.user_id).first()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        request.answer = reply_text
        request.status = "answered"
        request.answered_at = db_session.func.now()
        session.commit()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        await context.bot.send_message(
            chat_id=user.telegram_id,
            text=(
                f"üì¨ <b>–û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –≤–∞—à –∑–∞–ø–∏—Ç #{request_id}</b>\n\n"
                f"<b>–í–∞—à –∑–∞–ø–∏—Ç:</b>\n{request.message}\n\n"
                f"<b>–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:</b>\n{reply_text}"
            ),
            parse_mode="HTML"
        )
    except Exception as e:
        print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user.telegram_id}: {e}")
    
    # –°–æ–æ–±—â–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—É –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
    await update.message.reply_text(
        f"‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∑–∞–ø–∏—Ç #{request_id} —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.",
        reply_markup=get_manager_keyboard()
    )
    
    return MANAGER_MAIN

async def reply_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /reply –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ ID"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    with db_session() as session:
        user = session.query(User).filter(User.telegram_id == update.effective_user.id).first()
        if not user or user.role not in ["manager", "admin"]:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
            return
    
    # –†–∞–∑–±–∏—Ä–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    args = context.args
    if len(args) < 2:
        await update.message.reply_text(
            "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /reply [ID –∑–∞–ø–∏—Ç—É] [–≤–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å]"
        )
        return
    
    try:
        request_id = int(args[0])
        reply_text = ' '.join(args[1:])
        
        with db_session() as session:
            request = session.query(SupportRequest).filter(SupportRequest.id == request_id).first()
            
            if not request:
                await update.message.reply_text(f"–ó–∞–ø–∏—Ç #{request_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
                return
            
            if request.status != "pending":
                await update.message.reply_text(f"–ó–∞–ø–∏—Ç #{request_id} –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user = session.query(User).filter(User.id == request.user_id).first()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            request.answer = reply_text
            request.status = "answered"
            request.answered_at = db_session.func.now()
            session.commit()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            await context.bot.send_message(
                chat_id=user.telegram_id,
                text=(
                    f"üì¨ <b>–û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –≤–∞—à –∑–∞–ø–∏—Ç #{request_id}</b>\n\n"
                    f"<b>–í–∞—à –∑–∞–ø–∏—Ç:</b>\n{request.message}\n\n"
                    f"<b>–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:</b>\n{reply_text}"
                ),
                parse_mode="HTML"
            )
        except Exception as e:
            print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user.telegram_id}: {e}")
        
        await update.message.reply_text(f"‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∑–∞–ø–∏—Ç #{request_id} —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        
    except ValueError:
        await update.message.reply_text("–ü–æ–º–∏–ª–∫–∞: ID –∑–∞–ø–∏—Ç—É –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º.")
    except Exception as e:
        await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞: {str(e)}")

async def back_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await update.message.reply_text(
        "–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é",
        reply_markup=get_main_keyboard(update.effective_user.id)
    )
    return ConversationHandler.END

def get_manager_handlers():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    manager_conv = ConversationHandler(
        entry_points=[
            CommandHandler('manager', manager_command),
            MessageHandler(filters.Regex('^(–ü–∞–Ω–µ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞|üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞)$'), manager_command)
        ],
        states={
            MANAGER_MAIN: [
                MessageHandler(filters.Regex('^(–ê–∫—Ç–∏–≤–Ω—ñ –∑–∞—è–≤–∫–∏|üìã –ó–∞—è–≤–∫–∏)$'), view_orders),
                MessageHandler(filters.Regex('^(–ó–∞–ø–∏—Ç–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏|üìû –ó–∞–ø–∏—Ç–∏)$'), view_support_requests),
                MessageHandler(filters.Regex('^(–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é|üîô –ù–∞–∑–∞–¥)$'), back_to_main),
            ],
            VIEWING_ORDERS: [
                CallbackQueryHandler(view_order_details, pattern=r'^order_\d+$'),
                CallbackQueryHandler(handle_order_navigation),
            ],
            PROCESSING_ORDER: [
                CallbackQueryHandler(process_order_action),
            ],
            VIEWING_REQUESTS: [
                CallbackQueryHandler(start_reply_to_request, pattern=r'^reply_\d+$'),
                CallbackQueryHandler(handle_support_navigation),
            ],
            REPLYING_TO_REQUEST: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_reply),
            ],
        },
        fallbacks=[CommandHandler('cancel', back_to_main)],
    )
    
    reply_handler = CommandHandler('reply', reply_command)
    
    return [manager_conv, reply_handler]