from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, CommandHandler, MessageHandler, filters

from database import db_session
from database.models import User, Order
from keyboards import get_profile_keyboard, get_main_keyboard
from utils import user_required

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
PROFILE_MAIN, EDITING_CONTACT = range(2)

@user_required
async def profile_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏—Å—Ç–æ—Ä–∏—é –∑–∞—è–≤–æ–∫"""
    user_id = update.effective_user.id
    
    with db_session() as session:
        user = session.query(User).filter(User.telegram_id == user_id).first()
        
        if not user:
            await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å /start")
            return ConversationHandler.END
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞—è–≤–æ–∫
        orders = session.query(Order).filter(Order.user_id == user.id).order_by(Order.created_at.desc()).limit(5).all()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
        profile_text = f"üìã <b>–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å</b>\n\n"
        profile_text += f"üë§ <b>–Ü–º'—è:</b> {update.effective_user.first_name}\n"
        profile_text += f"üÜî <b>Telegram ID:</b> {user_id}\n"
        
        if user.contact_info:
            profile_text += f"üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:</b> {user.contact_info}\n"
        else:
            profile_text += "üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:</b> –ù–µ –≤–∫–∞–∑–∞–Ω–∞\n"
        
        profile_text += "\n<b>–û—Å—Ç–∞–Ω–Ω—ñ –∑–∞—è–≤–∫–∏:</b>\n"
        
        if not orders:
            profile_text += "–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∑–∞—è–≤–æ–∫.\n"
        else:
            for i, order in enumerate(orders, 1):
                profile_text += f"{i}. {order.currency_from} ‚Üí {order.currency_to} ({order.amount_from} {order.currency_from})\n"
                profile_text += f"   –°—Ç–∞—Ç—É—Å: {order.status}, –î–∞—Ç–∞: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        
        keyboard = get_profile_keyboard()
        
        await update.message.reply_text(
            profile_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        return PROFILE_MAIN

async def edit_contact_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    await update.message.reply_text(
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é (–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∞–±–æ —ñ–Ω—à–∏–π –∫–æ–Ω—Ç–∞–∫—Ç):",
        reply_markup=ReplyKeyboardMarkup([["–°–∫–∞—Å—É–≤–∞—Ç–∏"]], resize_keyboard=True)
    )
    return EDITING_CONTACT

async def save_contact_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    new_contact = update.message.text
    user_id = update.effective_user.id
    
    if new_contact == "–°–∫–∞—Å—É–≤–∞—Ç–∏":
        await update.message.reply_text(
            "–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó —Å–∫–∞—Å–æ–≤–∞–Ω–æ.",
            reply_markup=get_profile_keyboard()
        )
        return PROFILE_MAIN
    
    with db_session() as session:
        user = session.query(User).filter(User.telegram_id == user_id).first()
        user.contact_info = new_contact
        session.commit()
    
    await update.message.reply_text(
        "‚úÖ –í–∞—à–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–∞!",
        reply_markup=get_profile_keyboard()
    )
    
    return PROFILE_MAIN

async def back_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await update.message.reply_text(
        "–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é",
        reply_markup=get_main_keyboard(update.effective_user.id)
    )
    return ConversationHandler.END

def get_profile_handlers():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    profile_conv = ConversationHandler(
        entry_points=[CommandHandler('profile', profile_command),
                      MessageHandler(filters.Regex('^(–ü—Ä–æ—Ñ—ñ–ª—å|üë§ –ü—Ä–æ—Ñ—ñ–ª—å)$'), profile_command)],
        states={
            PROFILE_MAIN: [
                MessageHandler(filters.Regex('^(–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é|‚úèÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç)$'), edit_contact_info),
                MessageHandler(filters.Regex('^(–ù–∞–∑–∞–¥|üîô –ù–∞–∑–∞–¥)$'), back_to_main),
            ],
            EDITING_CONTACT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, save_contact_info),
            ],
        },
        fallbacks=[CommandHandler('cancel', back_to_main)],
    )
    
    return [profile_conv]