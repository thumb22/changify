from datetime import datetime
from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from keyboards.reply import get_main_keyboard
from states.profile import ProfileStates
from utils.error_handler import handle_errors

router = Router()

@router.message(F.text == "üë§ –ü—Ä–æ—Ñ—ñ–ª—å")
@handle_errors
async def cmd_profile(message: types.Message, db_user: dict, session):
    """Handler for profile command"""
    from database.models import Order
    from sqlalchemy.orm import Session
    from keyboards.inline import get_profile_settings
    
    orders = session.query(Order).filter(Order.user_id == db_user['telegram_id']).order_by(Order.created_at.desc()).limit(5).all()
    
    profile_text = f"üìã <b>–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å</b>\n\n"
    profile_text += f"üë§ <b>–Ü–º'—è:</b> {message.from_user.first_name}\n"
    profile_text += f"üÜî <b>Telegram ID:</b> {message.from_user.id}\n"
    
    if message.from_user.username:
        profile_text += f"üë§ <b>Username:</b> @{message.from_user.username}\n"
        
    created_at = db_user.get("created_at")
    if created_at:
        profile_text += f"üìÖ <b>–î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:</b> {created_at.strftime('%d.%m.%Y %H:%M')}\n"
    else:
        profile_text += "üìÖ <b>–î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:</b> –ù–µ–≤—ñ–¥–æ–º–æ\n"

    
    profile_text += "\n<b>–û—Å—Ç–∞–Ω–Ω—ñ –∑–∞—è–≤–∫–∏:</b>\n"
    
    if not orders:
        profile_text += "–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∑–∞—è–≤–æ–∫.\n"
    else:
        for i, order in enumerate(orders, 1):
            from_curr = order.from_currency.code
            to_curr = order.to_currency.code
            profile_text += f"{i}. {from_curr} ‚Üí {to_curr} ({order.amount_from} {from_curr})\n"
            profile_text += f"   –°—Ç–∞—Ç—É—Å: {order.status.value}, –î–∞—Ç–∞: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
    
    await message.answer(
        profile_text,
        parse_mode="HTML",
        reply_markup=get_profile_settings()
    )


@router.callback_query(F.data == "profile:contacts")
@handle_errors
async def edit_contacts(callback: types.CallbackQuery, state: FSMContext):
    """Handler for editing contact information"""
    await state.set_state(ProfileStates.EDIT_CONTACTS)
    await callback.message.answer(
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é (–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∞–±–æ —ñ–Ω—à–∏–π –∫–æ–Ω—Ç–∞–∫—Ç).\n"
        "–©–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /cancel"
    )
    await callback.answer()


@router.message(ProfileStates.EDIT_CONTACTS)
@handle_errors
async def save_contacts(message: types.Message, state: FSMContext, db_user: dict, session):
    """Handler for saving contact information"""
    from sqlalchemy.orm import Session
    from database.models import User
    
    new_contact = message.text
    
    if new_contact == "/cancel":
        await state.clear()
        await message.answer("–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
        return
    

    user = session.query(User).filter(User.id == db_user['telegram_id']).first()
    if user:
        user.contact_info = new_contact
        session.commit()
    
    await state.clear()
    await message.answer(
        "‚úÖ –í–∞—à–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–∞!",
        reply_markup=get_main_keyboard()
    )


@router.message(Command("cancel"))
@handle_errors
async def cmd_cancel(message: types.Message, state: FSMContext):
    """Handler for cancel command - resets any state"""
    current_state = await state.get_state()
    if current_state is not None:
        await state.clear()
        await message.answer(
            "–î—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞.",
            reply_markup=get_main_keyboard()
        )

def setup(dp):
    dp.include_router(router)