from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config import ADMIN_IDS
from keyboards.reply import get_admin_keyboard, get_main_keyboard
from states.admin import AdminStates
from utils.error_handler import handle_errors
from database.models import User, UserRole, Currency, Bank, ExchangeRate, CurrencyType
from utils import logger

router = Router()

# Middleware to check if user is admin
async def admin_filter(message: types.Message, db_user: dict):
    """Check if the user is an admin"""
    if db_user['telegram_id'] not in ADMIN_IDS and db_user['role'] != UserRole.ADMIN:
        await message.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return False
    return True

# Admin panel
@router.message(F.text == "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
@handle_errors
async def admin_settings(message: types.Message, db_user: dict):
    """Admin settings menu"""
    if not await admin_filter(message, db_user):
        return
    
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="üí± –ö–µ—Ä—É–≤–∞–Ω–Ω—è –∫—É—Ä—Å–∞–º–∏ –≤–∞–ª—é—Ç", callback_data="admin:rates")
    )
    builder.row(
        types.InlineKeyboardButton(text="üë• –ö–µ—Ä—É–≤–∞–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏", callback_data="admin:managers")
    )
    builder.row(
        types.InlineKeyboardButton(text="üè¶ –ë–∞–Ω–∫–∏", callback_data="admin:banks"),
        types.InlineKeyboardButton(text="üí∞ –í–∞–ª—é—Ç–∏", callback_data="admin:currencies")
    )
    builder.row(
        types.InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin:stats")
    )
    
    await message.answer(
        "‚öôÔ∏è <b>–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞ –ø–∞–Ω–µ–ª—å</b>\n\n"
        "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è:",
        reply_markup=builder.as_markup()
    )

# Exchange rates management
@router.callback_query(F.data == "admin:rates")
@handle_errors
async def manage_rates(callback: types.CallbackQuery, db_user: dict, session):
    """Exchange rates management"""
    if callback.from_user.id not in ADMIN_IDS and db_user['role'] != UserRole.ADMIN:
        await callback.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó", show_alert=True)
        return
    
    rates = session.query(ExchangeRate).all()
    
    text = "üí± <b>–ö–µ—Ä—É–≤–∞–Ω–Ω—è –∫—É—Ä—Å–∞–º–∏ –≤–∞–ª—é—Ç</b>\n\n"
    
    if not rates:
        text += "–ö—É—Ä—Å–∏ –≤–∞–ª—é—Ç –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ."
    else:
        for rate in rates:
            from_curr = session.query(Currency).filter_by(id=rate.from_currency_id).first()
            to_curr = session.query(Currency).filter_by(id=rate.to_currency_id).first()
            if from_curr and to_curr:
                text += f"{from_curr.code} ‚Üí {to_curr.code}: {rate.rate:.4f}\n"
    
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –∫—É—Ä—Å", callback_data="admin:rates:add")
    )
    builder.row(
        types.InlineKeyboardButton(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏ –∫—É—Ä—Å", callback_data="admin:rates:update")
    )
    builder.row(
        types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:back")
    )
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()

@router.callback_query(F.data == "admin:rates:add")
@handle_errors
async def add_rate(callback: types.CallbackQuery, state: FSMContext, session):
    """Start adding a new exchange rate"""
    currencies = session.query(Currency).filter_by(enabled=True).all()
    
    if len(currencies) < 2:
        await callback.message.edit_text(
            "‚ùå –î–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫—É—Ä—Å—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –º–∞—Ç–∏ —Ö–æ—á–∞ –± –¥–≤—ñ –≤–∞–ª—é—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—ñ.",
            reply_markup=InlineKeyboardBuilder().row(
                types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:rates")
            ).as_markup()
        )
        return
    
    builder = InlineKeyboardBuilder()
    for currency in currencies:
        builder.row(
            types.InlineKeyboardButton(
                text=f"{currency.code} ({CurrencyType(currency.type).name.lower()})",
                callback_data=f"admin:rate:from:{currency.id}"
            )
        )
    builder.row(
        types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:rates")
    )
    
    await callback.message.edit_text(
        "üí± <b>–î–æ–¥–∞–≤–∞–Ω–Ω—è –∫—É—Ä—Å—É –æ–±–º—ñ–Ω—É</b>\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—à—É –≤–∞–ª—é—Ç—É –ø–∞—Ä–∏ –æ–±–º—ñ–Ω—É:",
        reply_markup=builder.as_markup()
    )
    
    await state.set_state(AdminStates.UPDATE_RATE_SELECT_PAIR)
    await callback.answer()

@router.callback_query(F.data.startswith("admin:rate:from:"), AdminStates.UPDATE_RATE_SELECT_PAIR)
@handle_errors
async def select_to_currency(callback: types.CallbackQuery, state: FSMContext, session):
    """Select second currency for the rate pair"""
    from_currency_id = int(callback.data.split(":")[-1])
    from_currency = session.query(Currency).filter_by(id=from_currency_id).first()
    
    if not from_currency:
        await callback.message.edit_text(
            "‚ùå –í–∞–ª—é—Ç—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.",
            reply_markup=InlineKeyboardBuilder().row(
                types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:rates")
            ).as_markup()
        )
        return
    
    await state.update_data(from_currency_id=from_currency_id)
    
    currencies = session.query(Currency).filter_by(enabled=True).all()
    
    builder = InlineKeyboardBuilder()
    for currency in currencies:
        if currency.id != from_currency_id:
            builder.row(
                types.InlineKeyboardButton(
                    text=f"{currency.code} ({CurrencyType(currency.type).name.lower()})",
                    callback_data=f"admin:rate:to:{currency.id}"
                )
            )
    builder.row(
        types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:rates:add")
    )
    
    await callback.message.edit_text(
        f"üí± <b>–î–æ–¥–∞–≤–∞–Ω–Ω—è –∫—É—Ä—Å—É –æ–±–º—ñ–Ω—É</b>\n\n"
        f"–ü–µ—Ä—à–∞ –≤–∞–ª—é—Ç–∞: {from_currency.code}\n"
        f"–û–±–µ—Ä—ñ—Ç—å –¥—Ä—É–≥—É –≤–∞–ª—é—Ç—É –ø–∞—Ä–∏ –æ–±–º—ñ–Ω—É:",
        reply_markup=builder.as_markup()
    )
    
    await callback.answer()

@router.callback_query(F.data.startswith("admin:rate:to:"), AdminStates.UPDATE_RATE_SELECT_PAIR)
@handle_errors
async def enter_rate_value(callback: types.CallbackQuery, state: FSMContext, session):
    """Ask for the rate value"""
    to_currency_id = int(callback.data.split(":")[-1])
    to_currency = session.query(Currency).filter_by(id=to_currency_id).first()
    
    if not to_currency:
        await callback.message.edit_text(
            "‚ùå –í–∞–ª—é—Ç—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.",
            reply_markup=InlineKeyboardBuilder().row(
                types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:rates")
            ).as_markup()
        )
        return
    
    data = await state.get_data()
    from_currency_id = data.get("from_currency_id")
    from_currency = session.query(Currency).filter_by(id=from_currency_id).first()
    
    await state.update_data(to_currency_id=to_currency_id)
    
    # Check if the rate already exists
    existing_rate = session.query(ExchangeRate).filter_by(
        from_currency_id=from_currency_id,
        to_currency_id=to_currency_id
    ).first()
    
    if existing_rate:
        await callback.message.edit_text(
            f"‚ùå –ö—É—Ä—Å –æ–±–º—ñ–Ω—É {from_currency.code} ‚Üí {to_currency.code} –≤–∂–µ —ñ—Å–Ω—É—î.\n"
            f"–ü–æ—Ç–æ—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è: {existing_rate.rate:.4f}\n\n"
            f"–î–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ñ—É–Ω–∫—Ü—ñ—é '–û–Ω–æ–≤–∏—Ç–∏ –∫—É—Ä—Å'.",
            reply_markup=InlineKeyboardBuilder().row(
                types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:rates")
            ).as_markup()
        )
        await state.clear()
        return
    
    await callback.message.edit_text(
        f"üí± <b>–î–æ–¥–∞–≤–∞–Ω–Ω—è –∫—É—Ä—Å—É –æ–±–º—ñ–Ω—É</b>\n\n"
        f"–ü–∞—Ä–∞: {from_currency.code} ‚Üí {to_currency.code}\n"
        f"–í–≤–µ–¥—ñ—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è –∫—É—Ä—Å—É (—Å–∫—ñ–ª—å–∫–∏ {to_currency.code} –∑–∞ 1 {from_currency.code}):",
        reply_markup=InlineKeyboardBuilder().row(
            types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:rates")
        ).as_markup()
    )
    
    await state.set_state(AdminStates.UPDATE_RATE_ENTER_VALUE)
    await callback.answer()

@router.message(AdminStates.UPDATE_RATE_ENTER_VALUE)
@handle_errors
async def save_rate_value(message: types.Message, state: FSMContext, session):
    """Save the new exchange rate"""
    try:
        rate_value = float(message.text.replace(',', '.'))
        if rate_value <= 0:
            await message.answer("‚ùå –ö—É—Ä—Å –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–µ –Ω—É–ª—è. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.")
            return
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 38.5).")
        return
    
    data = await state.get_data()
    from_currency_id = data.get("from_currency")
    to_currency_id = data.get("to_currency")
    
    from_currency = session.query(Currency).filter_by(id=from_currency_id).first()
    to_currency = session.query(Currency).filter_by(id=to_currency_id).first()
    
    if not from_currency or not to_currency:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –ø—Ä–æ –≤–∞–ª—é—Ç–∏.")
        await state.clear()
        return
    
    # Create new exchange rate
    new_rate = ExchangeRate(
        from_currency_id=from_currency_id,
        to_currency_id=to_currency_id,
        rate=rate_value
    )
    
    session.add(new_rate)
    
    # Also add reverse rate automatically (e.g., if adding USD‚ÜíUAH, also add UAH‚ÜíUSD)
    reverse_rate = ExchangeRate(
        from_currency_id=to_currency_id,
        to_currency_id=from_currency_id,
        rate=1/rate_value
    )
    
    session.add(reverse_rate)
    session.commit()
    
    await message.answer(
        f"‚úÖ –ö—É—Ä—Å –æ–±–º—ñ–Ω—É –¥–æ–¥–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!\n\n"
        f"{from_currency.code} ‚Üí {to_currency.code}: {rate_value:.4f}\n"
        f"{to_currency.code} ‚Üí {from_currency.code}: {(1/rate_value):.4f}",
        reply_markup=InlineKeyboardBuilder().row(
            types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∫—É—Ä—Å—ñ–≤", callback_data="admin:rates")
        ).as_markup()
    )
    
    await state.clear()

@router.callback_query(F.data == "admin:rates:update")
@handle_errors
async def update_rate(callback: types.CallbackQuery, state: FSMContext, session):
    """Select rate to update"""
    rates = session.query(ExchangeRate).all()
    
    if not rates:
        await callback.message.edit_text(
            "‚ùå –ù–µ–º–∞—î –∫—É—Ä—Å—ñ–≤ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è. –°–ø–æ—á–∞—Ç–∫—É –¥–æ–¥–∞–π—Ç–µ –∫—É—Ä—Å–∏.",
            reply_markup=InlineKeyboardBuilder().row(
                types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:rates")
            ).as_markup()
        )
        return
    
    builder = InlineKeyboardBuilder()
    
    for rate in rates:
        from_currency = session.query(Currency).filter_by(id=rate.from_currency_id).first()
        to_currency = session.query(Currency).filter_by(id=rate.to_currency_id).first()
        
        if from_currency and to_currency:
            builder.row(
                types.InlineKeyboardButton(
                    text=f"{from_currency.code} ‚Üí {to_currency.code} ({rate.rate:.4f})",
                    callback_data=f"admin:rate:update:{rate.id}"
                )
            )
    
    builder.row(
        types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:rates")
    )
    
    await callback.message.edit_text(
        "üîÑ <b>–û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—É—Ä—Å—É –æ–±–º—ñ–Ω—É</b>\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –∫—É—Ä—Å –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:",
        reply_markup=builder.as_markup()
    )
    
    await callback.answer()

@router.callback_query(F.data.startswith("admin:rate:update:"))
@handle_errors
async def enter_updated_rate(callback: types.CallbackQuery, state: FSMContext, session):
    """Ask for the new rate value"""
    rate_id = int(callback.data.split(":")[-1])
    rate = session.query(ExchangeRate).filter_by(id=rate_id).first()
    
    if not rate:
        await callback.message.edit_text(
            "‚ùå –ö—É—Ä—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.",
            reply_markup=InlineKeyboardBuilder().row(
                types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:rates")
            ).as_markup()
        )
        return
    
    from_currency = session.query(Currency).filter_by(id=rate.from_currency_id).first()
    to_currency = session.query(Currency).filter_by(id=rate.to_currency_id).first()
    
    await state.update_data(rate_id=rate_id)
    
    await callback.message.edit_text(
        f"üîÑ <b>–û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—É—Ä—Å—É –æ–±–º—ñ–Ω—É</b>\n\n"
        f"–ü–∞—Ä–∞: {from_currency.code} ‚Üí {to_currency.code}\n"
        f"–ü–æ—Ç–æ—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è: {rate.rate:.4f}\n\n"
        f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –∫—É—Ä—Å—É (—Å–∫—ñ–ª—å–∫–∏ {to_currency.code} –∑–∞ 1 {from_currency.code}):",
        reply_markup=InlineKeyboardBuilder().row(
            types.InlineKeyboardButton(text="‚óÄÔ∏è –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="admin:rates")
        ).as_markup()
    )
    
    await state.set_state(AdminStates.UPDATE_RATE_ENTER_VALUE)
    await callback.answer()

# Manager management
@router.callback_query(F.data == "admin:managers")
@handle_errors
async def manage_managers(callback: types.CallbackQuery, db_user: dict, session):
    """Manager management"""
    if callback.from_user.id not in ADMIN_IDS and db_user['role'] != UserRole.ADMIN:
        await callback.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó", show_alert=True)
        return
    
    managers = session.query(User).filter_by(role=UserRole.MANAGER).all()
    
    text = "üë• <b>–ö–µ—Ä—É–≤–∞–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏</b>\n\n"
    
    if not managers:
        text += "–í —Å–∏—Å—Ç–µ–º—ñ –Ω–µ–º–∞—î –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤."
    else:
        for i, manager in enumerate(managers, 1):
            text += f"{i}. {manager.first_name or ''} {manager.last_name or ''} "
            if manager.username:
                text += f"(@{manager.username})"
            text += f" [ID: {manager.telegram_id}]\n"
    
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞", callback_data="admin:manager:add")
    )
    if managers:
        builder.row(
            types.InlineKeyboardButton(text="‚ûñ –í–∏–¥–∞–ª–∏—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞", callback_data="admin:manager:remove")
        )
    builder.row(
        types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:back")
    )
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()

@router.callback_query(F.data == "admin:manager:add")
@handle_errors
async def add_manager_start(callback: types.CallbackQuery, state: FSMContext):
    """Start adding a new manager"""
    await callback.message.edit_text(
        "üë§ <b>–î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞</b>\n\n"
        "–í–≤–µ–¥—ñ—Ç—å Telegram ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—Ä–∏–∑–Ω–∞—á–∏—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º:",
        reply_markup=InlineKeyboardBuilder().row(
            types.InlineKeyboardButton(text="‚óÄÔ∏è –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="admin:managers")
        ).as_markup()
    )
    
    await state.set_state(AdminStates.ADD_MANAGER)
    await callback.answer()

@router.message(AdminStates.ADD_MANAGER)
@handle_errors
async def add_manager_process(message: types.Message, state: FSMContext, session):
    """Process adding a new manager"""
    try:
        manager_id = int(message.text.strip())
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–∏–π Telegram ID.",
            reply_markup=InlineKeyboardBuilder().row(
                types.InlineKeyboardButton(text="‚óÄÔ∏è –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="admin:managers")
            ).as_markup()
        )
        return
    
    # Check if user exists
    user = session.query(User).filter_by(telegram_id=manager_id).first()
    
    if user and user.role == UserRole.MANAGER:
        await message.answer(
            "‚ùå –¶–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —î –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.",
            reply_markup=InlineKeyboardBuilder().row(
                types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:managers")
            ).as_markup()
        )
        await state.clear()
        return
    
    if user:
        user.role = UserRole.MANAGER
        success_text = f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.first_name or ''} {user.last_name or ''} –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º."
    else:
        new_manager = User(telegram_id=manager_id, role=UserRole.MANAGER)
        session.add(new_manager)
        success_text = f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID {manager_id} –¥–æ–¥–∞–Ω–æ —è–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞. –á–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—É–¥–µ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞, —â–æ–± —ó—Ö–Ω—ñ –¥–∞–Ω—ñ –æ–Ω–æ–≤–∏–ª–∏—Å—è."
    
    session.commit()
    
    await message.answer(
        success_text,
        reply_markup=InlineKeyboardBuilder().row(
            types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:managers")
        ).as_markup()
    )
    
    # Try to notify the new manager
    if user:
        try:
            await message.bot.send_message(
                manager_id,
                "üîî –í–∞—Å –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –æ–±–º—ñ–Ω–Ω–∏–∫–∞. –¢–µ–ø–µ—Ä –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ñ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó."
            )
        except Exception as e:
            logger.error(f"Failed to notify new manager: {e}")
    
    await state.clear()

@router.callback_query(F.data == "admin:manager:remove")
@handle_errors
async def remove_manager_start(callback: types.CallbackQuery, state: FSMContext, session):
    """Start removing a manager"""
    managers = session.query(User).filter_by(role=UserRole.MANAGER).all()
    
    if not managers:
        await callback.message.edit_text(
            "‚ùå –í —Å–∏—Å—Ç–µ–º—ñ –Ω–µ–º–∞—î –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.",
            reply_markup=InlineKeyboardBuilder().row(
                types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:managers")
            ).as_markup()
        )
        return
    
    builder = InlineKeyboardBuilder()
    
    for manager in managers:
        name = f"{manager.first_name or ''} {manager.last_name or ''}"
        if manager.username:
            name += f" (@{manager.username})"
        
        builder.row(
            types.InlineKeyboardButton(
                text=name,
                callback_data=f"admin:manager:remove:{manager.telegram_id}"
            )
        )
    
    builder.row(
        types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:managers")
    )
    
    await callback.message.edit_text(
        "üë§ <b>–í–∏–¥–∞–ª–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞</b>\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞, —è–∫–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏:",
        reply_markup=builder.as_markup()
    )
    
    await callback.answer()

@router.callback_query(F.data.startswith("admin:manager:remove:"))
@handle_errors
async def remove_manager_confirm(callback: types.CallbackQuery, state: FSMContext, session):
    """Confirm removing a manager"""
    manager_id = int(callback.data.split(":")[-1])
    
    manager = session.query(User).filter_by(telegram_id=manager_id).first()
    
    if not manager or manager.role != UserRole.MANAGER:
        await callback.message.edit_text(
            "‚ùå –ú–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ú–æ–∂–ª–∏–≤–æ, –≤—ñ–Ω –≤–∂–µ –±—É–≤ –≤–∏–¥–∞–ª–µ–Ω–∏–π.",
            reply_markup=InlineKeyboardBuilder().row(
                types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:managers")
            ).as_markup()
        )
        return
    
    name = f"{manager.first_name or ''} {manager.last_name or ''}"
    if manager.username:
        name += f" (@{manager.username})"
    
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(
            text="‚úÖ –¢–∞–∫, –≤–∏–¥–∞–ª–∏—Ç–∏",
            callback_data=f"admin:manager:remove:confirm:{manager_id}"
        )
    )
    builder.row(
        types.InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="admin:managers")
    )
    
    await callback.message.edit_text(
        f"‚ùì <b>–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥—ñ—ó</b>\n\n"
        f"–í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ {name}?",
        reply_markup=builder.as_markup()
    )
    
    await callback.answer()

@router.callback_query(F.data.startswith("admin:manager:remove:confirm:"))
@handle_errors
async def remove_manager_process(callback: types.CallbackQuery, state: FSMContext, session):
    """Process removing a manager"""
    manager_id = int(callback.data.split(":")[-1])
    
    manager = session.query(User).filter_by(telegram_id=manager_id).first()
    
    if not manager or manager.role != UserRole.MANAGER:
        await callback.message.edit_text(
            "‚ùå –ú–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ú–æ–∂–ª–∏–≤–æ, –≤—ñ–Ω –≤–∂–µ –±—É–≤ –≤–∏–¥–∞–ª–µ–Ω–∏–π.",
            reply_markup=InlineKeyboardBuilder().row(
                types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:managers")
            ).as_markup()
        )
        return
    
    # Change role back to regular user
    manager.role = UserRole.USER
    session.commit()
    
    name = f"{manager.first_name or ''} {manager.last_name or ''}"
    if manager.username:
        name += f" (@{manager.username})"
    
    await callback.message.edit_text(
        f"‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä–∞ {name} –≤–∏–¥–∞–ª–µ–Ω–æ. –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ç–µ–ø–µ—Ä –º–∞—î —Ä–æ–ª—å –∑–≤–∏—á–∞–π–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.",
        reply_markup=InlineKeyboardBuilder().row(
            types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:managers")
        ).as_markup()
    )
    
    # Try to notify the former manager
    try:
        await callback.bot.send_message(
            manager_id,
            "üîî –í–∞—Å –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ –∑ —Ä–æ–ª—ñ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ–±–º—ñ–Ω–Ω–∏–∫–∞."
        )
    except Exception as e:
        logger.error(f"Failed to notify former manager: {e}")
    
    await callback.answer()

# Currency management
@router.callback_query(F.data == "admin:currencies")
@handle_errors
async def manage_currencies(callback: types.CallbackQuery, db_user: dict, session):
    """Currency management"""
    if callback.from_user.id not in ADMIN_IDS and db_user['role'] != UserRole.ADMIN:
        await callback.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó", show_alert=True)
        return
    
    currencies = session.query(Currency).all()
    
    text = "üí∞ <b>–ö–µ—Ä—É–≤–∞–Ω–Ω—è –≤–∞–ª—é—Ç–∞–º–∏</b>\n\n"
    
    if not currencies:
        text += "–í —Å–∏—Å—Ç–µ–º—ñ –Ω–µ–º–∞—î –≤–∞–ª—é—Ç."
    else:
        text += "<b>–ê–∫—Ç–∏–≤–Ω—ñ –≤–∞–ª—é—Ç–∏:</b>\n"
        for currency in currencies:
            if currency.enabled:
                text += f"‚Ä¢ {currency.code} - {currency.name} ({CurrencyType(currency.type).name.lower()})\n"
        
        text += "\n<b>–ù–µ–∞–∫—Ç–∏–≤–Ω—ñ –≤–∞–ª—é—Ç–∏:</b>\n"
        inactive = False
        for currency in currencies:
            if not currency.enabled:
                text += f"‚Ä¢ {currency.code} - {currency.name} ({CurrencyType(currency.type).name.lower()})\n"
                inactive = True
        
        if not inactive:
            text += "–ù–µ–º–∞—î –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö –≤–∞–ª—é—Ç\n"
    
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –≤–∞–ª—é—Ç—É", callback_data="admin:currency:add")
    )
    if currencies:
        builder.row(
            types.InlineKeyboardButton(text="‚úÖ –ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏/–î–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏", callback_data="admin:currency:toggle")
        )
    builder.row(
        types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:back")
    )
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()

@router.callback_query(F.data == "admin:currency:add")
@handle_errors
async def add_currency_start(callback: types.CallbackQuery, state: FSMContext):
    """Start adding a new currency"""
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="CRYPTO", callback_data="admin:currency:type:CRYPTO")
    )
    builder.row(
        types.InlineKeyboardButton(text="FIAT", callback_data="admin:currency:type:FIAT")
    )
    builder.row(
        types.InlineKeyboardButton(text="‚óÄÔ∏è –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="admin:currencies")
    )
    
    await callback.message.edit_text(
        "üí∞ <b>–î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó –≤–∞–ª—é—Ç–∏</b>\n\n"
        "–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –≤–∞–ª—é—Ç–∏:",
        reply_markup=builder.as_markup()
    )
    
    await callback.answer()

@router.callback_query(F.data.startswith("admin:currency:type:"))
@handle_errors
async def add_currency_code(callback: types.CallbackQuery, state: FSMContext):
    """Ask for currency code"""
    currency_type = callback.data.split(":")[-1]
    
    await state.update_data(currency_type=currency_type)
    await state.set_state(AdminStates.ADD_CURRENCY)
    
    await callback.message.edit_text(
        f"üí∞ <b>–î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó –≤–∞–ª—é—Ç–∏</b>\n\n"
        f"–¢–∏–ø: {currency_type}\n\n"
        f"–í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –≤–∞–ª—é—Ç–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, USD –∞–±–æ BTC):",
        reply_markup=InlineKeyboardBuilder().row(
            types.InlineKeyboardButton(text="‚óÄÔ∏è –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="admin:currencies")
        ).as_markup()
    )
    
    await callback.answer()

def setup(dp):
    dp.include_router(router)