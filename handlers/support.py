from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, CommandHandler, MessageHandler, filters

from database import db_session
from database.models import User, SupportRequest
from keyboards import get_main_keyboard, get_support_keyboard
from utils import user_required, send_message_to_managers

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SUPPORT_MAIN, SENDING_MESSAGE = range(2)

@user_required
async def support_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    await update.message.reply_text(
        "üìû <b>–ó–≤'—è–∑–æ–∫ –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º</b>\n\n"
        "–í–∏ –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ–ø–æ–º–æ–≥—É –≤—ñ–¥ –Ω–∞—à–∏—Ö –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤.\n"
        "–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –Ω–∏–∂—á–µ:",
        reply_markup=get_support_keyboard(),
        parse_mode="HTML"
    )
    return SUPPORT_MAIN

async def start_new_request(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"""
    await update.message.reply_text(
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –ø—Ä–æ–±–ª–µ–º—É. "
        "–ú–µ–Ω–µ–¥–∂–µ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ —è–∫–Ω–∞–π—à–≤–∏–¥—à–µ.",
        reply_markup=ReplyKeyboardMarkup([["–°–∫–∞—Å—É–≤–∞—Ç–∏"]], resize_keyboard=True)
    )
    return SENDING_MESSAGE

async def process_support_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º"""
    message_text = update.message.text
    user_id = update.effective_user.id
    username = update.effective_user.username or "–ë–µ–∑ —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"
    
    if message_text == "–°–∫–∞—Å—É–≤–∞—Ç–∏":
        await update.message.reply_text(
            "–ó–∞–ø–∏—Ç —Å–∫–∞—Å–æ–≤–∞–Ω–æ.",
            reply_markup=get_support_keyboard()
        )
        return SUPPORT_MAIN
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    with db_session() as session:
        user = session.query(User).filter(User.telegram_id == user_id).first()
        
        if not user:
            await update.message.reply_text("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –∑ /start")
            return ConversationHandler.END
        
        support_request = SupportRequest(
            user_id=user.id,
            message=message_text,
            status="pending"  # pending, answered, closed
        )
        session.add(support_request)
        session.commit()
        request_id = support_request.id
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
    manager_notification = (
        f"üÜò <b>–ù–æ–≤–∏–π –∑–∞–ø–∏—Ç –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ #{request_id}</b>\n\n"
        f"–í—ñ–¥: {update.effective_user.first_name} (@{username}, ID: {user_id})\n"
        f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {message_text}\n\n"
        f"–î–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /reply {request_id} [–≤–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å]"
    )
    
    await send_message_to_managers(context.bot, manager_notification)
    
    await update.message.reply_text(
        "‚úÖ –í–∞—à –∑–∞–ø–∏—Ç —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É!\n"
        "–ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ —è–∫–Ω–∞–π—à–≤–∏–¥—à–µ.",
        reply_markup=get_support_keyboard()
    )
    
    return SUPPORT_MAIN

async def view_support_history(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"""
    user_id = update.effective_user.id
    
    with db_session() as session:
        user = session.query(User).filter(User.telegram_id == user_id).first()
        
        if not user:
            await update.message.reply_text("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –∑ /start")
            return ConversationHandler.END
        
        requests = session.query(SupportRequest).filter(
            SupportRequest.user_id == user.id
        ).order_by(SupportRequest.created_at.desc()).limit(5).all()
    
    if not requests:
        await update.message.reply_text(
            "–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∑–∞–ø–∏—Ç—ñ–≤ —É –ø—ñ–¥—Ç—Ä–∏–º–∫—É.",
            reply_markup=get_support_keyboard()
        )
        return SUPPORT_MAIN
    
    history_text = "üìã <b>–Ü—Å—Ç–æ—Ä—ñ—è –≤–∞—à–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤:</b>\n\n"
    
    for req in requests:
        status_emoji = "‚è≥" if req.status == "pending" else "‚úÖ" if req.status == "answered" else "üîí"
        status_text = "–í –æ—á—ñ–∫—É–≤–∞–Ω–Ω—ñ" if req.status == "pending" else "–í—ñ–¥–ø–æ–≤—ñ–¥—å –æ—Ç—Ä–∏–º–∞–Ω–∞" if req.status == "answered" else "–ó–∞–∫—Ä–∏—Ç–æ"
        
        history_text += f"<b>–ó–∞–ø–∏—Ç #{req.id}</b> {status_emoji} {status_text}\n"
        history_text += f"üìÖ {req.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        history_text += f"üí¨ {req.message[:50]}{'...' if len(req.message) > 50 else ''}\n"
        
        if req.answer:
            history_text += f"üìù <b>–í—ñ–¥–ø–æ–≤—ñ–¥—å:</b> {req.answer[:50]}{'...' if len(req.answer) > 50 else ''}\n"
        
        history_text += "\n"
    
    await update.message.reply_text(
        history_text,
        reply_markup=get_support_keyboard(),
        parse_mode="HTML"
    )
    
    return SUPPORT_MAIN

async def back_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await update.message.reply_text(
        "–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é",
        reply_markup=get_main_keyboard(update.effective_user.id)
    )
    return ConversationHandler.END

def get_support_handlers():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    support_conv = ConversationHandler(
        entry_points=[
            CommandHandler('support', support_command),
            MessageHandler(filters.Regex('^(–ü—ñ–¥—Ç—Ä–∏–º–∫–∞|üìû –ü—ñ–¥—Ç—Ä–∏–º–∫–∞)$'), support_command)
        ],
        states={
            SUPPORT_MAIN: [
                MessageHandler(filters.Regex('^(–ù–æ–≤–∏–π –∑–∞–ø–∏—Ç|‚úâÔ∏è –ù–æ–≤–∏–π –∑–∞–ø–∏—Ç)$'), start_new_request),
                MessageHandler(filters.Regex('^(–Ü—Å—Ç–æ—Ä—ñ—è –∑–∞–ø–∏—Ç—ñ–≤|üìã –Ü—Å—Ç–æ—Ä—ñ—è)$'), view_support_history),
                MessageHandler(filters.Regex('^(–ù–∞–∑–∞–¥|üîô –ù–∞–∑–∞–¥)$'), back_to_main),
            ],
            SENDING_MESSAGE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_support_message),
            ],
        },
        fallbacks=[CommandHandler('cancel', back_to_main)],
    )
    
    return [support_conv]