from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from keyboards.reply import get_main_keyboard, get_support_keyboard
from states.support import SupportStates
from utils.error_handler import handle_errors
import config

router = Router()

@router.message(F.text == "‚úâÔ∏è –ù–æ–≤–∏–π –∑–∞–ø–∏—Ç", SupportStates.MAIN)
@handle_errors
async def start_new_request(message: types.Message, state: FSMContext):
    await message.answer(
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –ø—Ä–æ–±–ª–µ–º—É. "
        "–ú–µ–Ω–µ–¥–∂–µ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ —è–∫–Ω–∞–π—à–≤–∏–¥—à–µ.",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[[types.KeyboardButton(text="–°–∫–∞—Å—É–≤–∞—Ç–∏")]],
            resize_keyboard=True
        )
    )
    await state.set_state(SupportStates.SENDING_MESSAGE)

@router.message(SupportStates.SENDING_MESSAGE)
@handle_errors
async def process_support_message(message: types.Message, state: FSMContext):
    message_text = message.text
    user_id = message.from_user.id
    username = message.from_user.username or "–ë–µ–∑ —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"

    if message_text == "–°–∫–∞—Å—É–≤–∞—Ç–∏":
        await message.answer(
            "–ó–∞–ø–∏—Ç —Å–∫–∞—Å–æ–≤–∞–Ω–æ.",
            reply_markup=get_support_keyboard()
        )
        await state.set_state(SupportStates.MAIN)
        return

    manager_notification = (
        f"üÜò <b>–ù–æ–≤–∏–π –∑–∞–ø–∏—Ç –ø—ñ–¥—Ç—Ä–∏–º–∫–∏</b>\n\n"
        f"–í—ñ–¥: {message.from_user.first_name} (@{username}, ID: {user_id})\n"
        f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {message_text}\n\n"
        f"–î–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /reply {user_id} [–≤–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å]"
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
    for manager_id in config.MANAGER_IDS:
        try:
            await message.bot.send_message(
                chat_id=manager_id,
                text=manager_notification,
                parse_mode="HTML"
            )
        except Exception as e:
            print(f"Failed to send message to manager {manager_id}: {e}")

    await message.answer(
        "‚úÖ –í–∞—à –∑–∞–ø–∏—Ç —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É!\n"
        "–ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ —è–∫–Ω–∞–π—à–≤–∏–¥—à–µ.",
        reply_markup=get_main_keyboard()
    )
    await state.set_state(SupportStates.MAIN)

@router.message(F.text == "üîô –ù–∞–∑–∞–¥", SupportStates.MAIN)
@handle_errors
async def back_to_main(message: types.Message, state: FSMContext):
    await message.answer(
        "–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é",
        reply_markup=get_main_keyboard()
    ) 
    await state.clear()

def setup(dp):
    dp.include_router(router)