from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.orm import Session
from database.models import User, SupportRequest
from keyboards.reply import get_main_keyboard, get_support_keyboard
# from utils import send_message_to_managers
from utils.error_handler import handle_errors

router = Router()

class SupportStates(StatesGroup):
    MAIN = State()
    SENDING_MESSAGE = State()

@router.message(F.text == "üÜò –ü—ñ–¥—Ç—Ä–∏–º–∫–∞")
@handle_errors
async def support_command(message: types.Message, state: FSMContext):
    await message.answer(
        "üìû <b>–ó–≤'—è–∑–æ–∫ –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º</b>\n\n"
        "–í–∏ –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ–ø–æ–º–æ–≥—É –≤—ñ–¥ –Ω–∞—à–∏—Ö –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤.\n"
        "–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –Ω–∏–∂—á–µ:",
        reply_markup=get_support_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(SupportStates.MAIN)

@router.message(F.text == "‚úâÔ∏è –ù–æ–≤–∏–π –∑–∞–ø–∏—Ç", SupportStates.MAIN)
@handle_errors
async def start_new_request(message: types.Message, state: FSMContext):
    await message.answer(
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –ø—Ä–æ–±–ª–µ–º—É. "
        "–ú–µ–Ω–µ–¥–∂–µ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ —è–∫–Ω–∞–π—à–≤–∏–¥—à–µ.",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[[types.KeyboardButton(text="–°–∫–∞—Å—É–≤–∞—Ç–∏")]],
            resize_keyboard=True
        )
    )
    await state.set_state(SupportStates.SENDING_MESSAGE)

@router.message(SupportStates.SENDING_MESSAGE)
@handle_errors
async def process_support_message(message: types.Message, state: FSMContext, engine, db_user: dict):
    message_text = message.text
    user_id = message.from_user.id
    username = message.from_user.username or "–ë–µ–∑ —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"

    if message_text == "–°–∫–∞—Å—É–≤–∞—Ç–∏":
        await message.answer(
            "–ó–∞–ø–∏—Ç —Å–∫–∞—Å–æ–≤–∞–Ω–æ.",
            reply_markup=get_support_keyboard()
        )
        await state.set_state(SupportStates.MAIN)
        return

    with Session(engine) as session:
        user = session.query(User).filter(User.telegram_id == user_id).first()
        if not user:
            await message.answer("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –∑ /start")
            await state.clear()
            return

        support_request = SupportRequest(
            user_id=user.id,
            message=message_text,
            status="pending"
        )
        session.add(support_request)
        session.commit()
        request_id = support_request.id

    manager_notification = (
        f"üÜò <b>–ù–æ–≤–∏–π –∑–∞–ø–∏—Ç –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ #{request_id}</b>\n\n"
        f"–í—ñ–¥: {message.from_user.first_name} (@{username}, ID: {user_id})\n"
        f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {message_text}\n\n"
        f"–î–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /reply {request_id} [–≤–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å]"
    )

    print(f"Would send to managers: {manager_notification}")    
    # await send_message_to_managers(message.bot, manager_notification)

    await message.answer(
        "‚úÖ –í–∞—à –∑–∞–ø–∏—Ç —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É!\n"
        "–ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ —è–∫–Ω–∞–π—à–≤–∏–¥—à–µ.",
        reply_markup=get_support_keyboard()
    )
    await state.set_state(SupportStates.MAIN)

@router.message(F.text == "üìã –Ü—Å—Ç–æ—Ä—ñ—è", SupportStates.MAIN)
@handle_errors
async def view_support_history(message: types.Message, engine, db_user: dict):
    user_id = message.from_user.id

    with Session(engine) as session:
        user = session.query(User).filter(User.telegram_id == user_id).first()
        if not user:
            await message.answer("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –∑ /start")
            return

        requests = session.query(SupportRequest).filter(
            SupportRequest.user_id == user.id
        ).order_by(SupportRequest.created_at.desc()).limit(5).all()

    if not requests:
        await message.answer(
            "–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∑–∞–ø–∏—Ç—ñ–≤ —É –ø—ñ–¥—Ç—Ä–∏–º–∫—É.",
            reply_markup=get_support_keyboard()
        )
        return

    history_text = "üìã <b>–Ü—Å—Ç–æ—Ä—ñ—è –≤–∞—à–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤:</b>\n\n"
    for req in requests:
        status_emoji = "‚è≥" if req.status == "pending" else "‚úÖ" if req.status == "answered" else "üîí"
        status_text = "–í –æ—á—ñ–∫—É–≤–∞–Ω–Ω—ñ" if req.status == "pending" else "–í—ñ–¥–ø–æ–≤—ñ–¥—å –æ—Ç—Ä–∏–º–∞–Ω–∞" if req.status == "answered" else "–ó–∞–∫—Ä–∏—Ç–æ"
        history_text += f"<b>–ó–∞–ø–∏—Ç #{req.id}</b> {status_emoji} {status_text}\n"
        history_text += f"üìÖ {req.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        history_text += f"üí¨ {req.message[:50]}{'...' if len(req.message) > 50 else ''}\n"
        if req.answer:
            history_text += f"üìù <b>–í—ñ–¥–ø–æ–≤—ñ–¥—å:</b> {req.answer[:50]}{'...' if len(req.answer) > 50 else ''}\n"
        history_text += "\n"

    await message.answer(
        history_text,
        reply_markup=get_support_keyboard(),
        parse_mode="HTML"
    )

@router.message(F.text == "üîô –ù–∞–∑–∞–¥", SupportStates.MAIN)
@handle_errors
async def back_to_main(message: types.Message, state: FSMContext):
    await message.answer(
        "–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é",
        reply_markup=get_main_keyboard()
    )
    await state.clear()

def setup_support_handlers(dp):
    dp.include_router(router)